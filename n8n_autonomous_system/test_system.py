#!/usr/bin/env python3
"""
üß™ SYSTEM TESTER - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

async def test_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ù–û–ú–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        print("üì¶ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        from orchestrator import AutonomousOrchestrator
        from connector import N8NConnector
        from monitor import ExecutionMonitor
        from analyzer import ErrorAnalyzer
        from fixer import AutoFixer
        print("   ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüîß –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # N8N Connector
        connector = N8NConnector()
        print("   ‚úÖ N8N Connector —Å–æ–∑–¥–∞–Ω")
        
        # Error Analyzer
        analyzer = ErrorAnalyzer()
        print("   ‚úÖ Error Analyzer —Å–æ–∑–¥–∞–Ω")
        
        # Execution Monitor
        monitor = ExecutionMonitor(connector, poll_interval=30)
        print("   ‚úÖ Execution Monitor —Å–æ–∑–¥–∞–Ω")
        
        # Auto Fixer
        fixer = AutoFixer(connector)
        print("   ‚úÖ Auto Fixer —Å–æ–∑–¥–∞–Ω")
        
        # Orchestrator
        orchestrator = AutonomousOrchestrator()
        print("   ‚úÖ Orchestrator —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
        print("\nüß† –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—à–∏–±–æ–∫...")
        
        test_errors = [
            ("auth_error", "Authentication failed: Invalid API token", "OpenRouter Chat Model"),
            ("session_error", "Session ID is required but not provided", "Simple Memory"),
            ("network_error", "ECONNREFUSED: Connection refused", "HTTP Request"),
        ]
        
        for error_type, error_message, node_name in test_errors:
            analysis = await analyzer.analyze_error(
                workflow_id="test_workflow",
                error_type=error_type,
                error_message=error_message,
                node_name=node_name
            )
            
            print(f"   ‚úÖ {error_type}: {analysis.category.value} (confidence: {analysis.confidence:.2f})")
        
        # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        analyzer_stats = analyzer.get_error_statistics()
        print(f"   üìà Analyzer: {analyzer_stats['total_analyses']} –∞–Ω–∞–ª–∏–∑–æ–≤")
        
        fixer_stats = fixer.get_statistics()
        print(f"   üîß Fixer: {fixer_stats['total_fixes']} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        monitor_stats = monitor.get_stats()
        print(f"   üëÅÔ∏è Monitor: {monitor_stats.total_executions} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = await test_components()
    
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")
        return 0
    else:
        print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
