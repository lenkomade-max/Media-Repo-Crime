#!/usr/bin/env python3
"""
üß† ERROR ANALYZER - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫ N8N

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π:
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º –∏ –ø—Ä–∏—á–∏–Ω–∞–º
- Machine learning –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
- Confidence scoring –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
- Repair strategies –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-10-02
–í–µ—Ä—Å–∏—è: 1.0
"""

import json
import logging
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import statistics
from collections import defaultdict, Counter

logger = logging.getLogger(__name__)

class ErrorCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""
    AUTHENTICATION = "authentication"
    NETWORK = "network"
    EXTERNAL_API = "external_api"
    MAPPING = "mapping"
    VALIDATION = "validation"
    INTERNAL = "internal"
    TIMEOUT = "timeout"
    CREDENTIALS = "credentials"
    CONFIGURATION = "configuration"
    RESOURCE = "resource"
    UNKNOWN = "unknown"

class FixType(Enum):
    """–¢–∏–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    ADD_PARAMETER = "add_parameter"
    UPDATE_PARAMETER = "update_parameter"
    FIX_CREDENTIALS = "fix_credentials"
    ADD_RETRY = "add_retry"
    INCREASE_TIMEOUT = "increase_timeout"
    ADD_VALIDATION = "add_validation"
    REPLACE_NODE = "replace_node"
    ADD_ERROR_HANDLING = "add_error_handling"
    UPDATE_MAPPING = "update_mapping"
    ADD_CIRCUIT_BREAKER = "add_circuit_breaker"

@dataclass
class ErrorPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    category: ErrorCategory
    keywords: List[str]
    regex_patterns: List[str]
    node_types: List[str] = field(default_factory=list)
    confidence_boost: float = 0.0
    
@dataclass
class RepairStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    fix_type: FixType
    description: str
    confidence_threshold: float
    parameters: Dict[str, Any] = field(default_factory=dict)
    prerequisites: List[str] = field(default_factory=list)
    risk_level: str = "low"  # low, medium, high

@dataclass
class ErrorAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏"""
    error_id: str
    category: ErrorCategory
    confidence: float
    description: str
    suggested_fix: RepairStrategy
    alternative_fixes: List[RepairStrategy] = field(default_factory=list)
    root_cause: Optional[str] = None
    affected_nodes: List[str] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    analyzed_at: datetime = field(default_factory=datetime.now)

class ErrorAnalyzer:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ N8N workflow'–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    - –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    - –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, config: Dict[str, Any] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.config = config or {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        self.error_patterns = self._initialize_error_patterns()
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.repair_strategies = self._initialize_repair_strategies()
        
        # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.analysis_history: List[ErrorAnalysis] = []
        self.success_rates: Dict[str, List[bool]] = defaultdict(list)
        
        # –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫
        self.error_cache: Dict[str, ErrorAnalysis] = {}
        
        logger.info("üß† Error Analyzer initialized")
    
    def _initialize_error_patterns(self) -> List[ErrorPattern]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫"""
        patterns = [
            # Authentication/Credentials –æ—à–∏–±–∫–∏
            ErrorPattern(
                category=ErrorCategory.AUTHENTICATION,
                keywords=["unauthorized", "authentication", "invalid token", "access denied", "401", "403"],
                regex_patterns=[
                    r"authentication.*failed",
                    r"invalid.*token",
                    r"access.*denied",
                    r"unauthorized.*request"
                ],
                node_types=["@n8n/n8n-nodes-langchain.lmChatOpenRouter", "n8n-nodes-base.httpRequest"],
                confidence_boost=0.2
            ),
            
            # Network/Timeout –æ—à–∏–±–∫–∏
            ErrorPattern(
                category=ErrorCategory.NETWORK,
                keywords=["timeout", "connection", "network", "ECONNREFUSED", "ETIMEDOUT", "DNS"],
                regex_patterns=[
                    r"connection.*timeout",
                    r"network.*error",
                    r"ECONNREFUSED",
                    r"ETIMEDOUT",
                    r"getaddrinfo.*ENOTFOUND"
                ],
                node_types=["n8n-nodes-base.httpRequest"],
                confidence_boost=0.15
            ),
            
            # External API –æ—à–∏–±–∫–∏
            ErrorPattern(
                category=ErrorCategory.EXTERNAL_API,
                keywords=["500", "502", "503", "504", "rate limit", "quota", "API error"],
                regex_patterns=[
                    r"HTTP.*5\d{2}",
                    r"rate.*limit.*exceeded",
                    r"quota.*exceeded",
                    r"API.*error"
                ],
                node_types=["n8n-nodes-base.httpRequest", "@n8n/n8n-nodes-langchain.lmChatOpenRouter"],
                confidence_boost=0.1
            ),
            
            # Mapping/Validation –æ—à–∏–±–∫–∏
            ErrorPattern(
                category=ErrorCategory.MAPPING,
                keywords=["undefined", "null", "missing property", "cannot read", "path not found"],
                regex_patterns=[
                    r"cannot.*read.*property",
                    r"undefined.*is.*not.*a.*function",
                    r"path.*not.*found",
                    r"missing.*required.*field"
                ],
                node_types=["n8n-nodes-base.set", "n8n-nodes-base.code"],
                confidence_boost=0.25
            ),
            
            # Session ID –æ—à–∏–±–∫–∏ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è N8N AI –Ω–æ–¥–æ–≤)
            ErrorPattern(
                category=ErrorCategory.CONFIGURATION,
                keywords=["session", "sessionId", "no session"],
                regex_patterns=[
                    r"session.*id.*required",
                    r"no.*session.*found",
                    r"session.*not.*provided"
                ],
                node_types=["@n8n/n8n-nodes-langchain.memoryBufferWindow"],
                confidence_boost=0.3
            ),
            
            # Credentials –æ—à–∏–±–∫–∏
            ErrorPattern(
                category=ErrorCategory.CREDENTIALS,
                keywords=["credential", "api key", "token", "secret"],
                regex_patterns=[
                    r"credential.*not.*found",
                    r"invalid.*api.*key",
                    r"missing.*credentials"
                ],
                node_types=["@n8n/n8n-nodes-langchain.lmChatOpenRouter", "n8n-nodes-base.googleDrive"],
                confidence_boost=0.2
            ),
            
            # Internal/Code –æ—à–∏–±–∫–∏
            ErrorPattern(
                category=ErrorCategory.INTERNAL,
                keywords=["syntax error", "reference error", "type error", "function not defined"],
                regex_patterns=[
                    r"SyntaxError",
                    r"ReferenceError",
                    r"TypeError",
                    r"function.*not.*defined"
                ],
                node_types=["n8n-nodes-base.code", "n8n-nodes-base.function"],
                confidence_boost=0.15
            )
        ]
        
        return patterns
    
    def _initialize_repair_strategies(self) -> Dict[ErrorCategory, List[RepairStrategy]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        strategies = {
            ErrorCategory.AUTHENTICATION: [
                RepairStrategy(
                    fix_type=FixType.FIX_CREDENTIALS,
                    description="Update or refresh authentication credentials",
                    confidence_threshold=0.8,
                    parameters={"credential_type": "openRouterApi", "credential_id": "dctACn3yXSG7qIdH"},
                    risk_level="low"
                )
            ],
            
            ErrorCategory.NETWORK: [
                RepairStrategy(
                    fix_type=FixType.INCREASE_TIMEOUT,
                    description="Increase request timeout",
                    confidence_threshold=0.7,
                    parameters={"timeout": 60000, "field": "options.timeout"},
                    risk_level="low"
                ),
                RepairStrategy(
                    fix_type=FixType.ADD_RETRY,
                    description="Add retry mechanism with exponential backoff",
                    confidence_threshold=0.6,
                    parameters={"max_retries": 3, "backoff_factor": 2},
                    risk_level="low"
                )
            ],
            
            ErrorCategory.EXTERNAL_API: [
                RepairStrategy(
                    fix_type=FixType.ADD_CIRCUIT_BREAKER,
                    description="Add circuit breaker pattern",
                    confidence_threshold=0.6,
                    parameters={"failure_threshold": 5, "recovery_timeout": 60},
                    risk_level="medium"
                ),
                RepairStrategy(
                    fix_type=FixType.ADD_RETRY,
                    description="Add retry with exponential backoff for API calls",
                    confidence_threshold=0.8,
                    parameters={"max_retries": 3, "backoff_factor": 2, "status_codes": [500, 502, 503, 504]},
                    risk_level="low"
                )
            ],
            
            ErrorCategory.MAPPING: [
                RepairStrategy(
                    fix_type=FixType.ADD_VALIDATION,
                    description="Add input validation and default values",
                    confidence_threshold=0.7,
                    parameters={"add_null_checks": True, "provide_defaults": True},
                    risk_level="low"
                ),
                RepairStrategy(
                    fix_type=FixType.UPDATE_MAPPING,
                    description="Fix field mapping paths",
                    confidence_threshold=0.8,
                    parameters={"fix_paths": True, "add_fallbacks": True},
                    risk_level="low"
                )
            ],
            
            ErrorCategory.CONFIGURATION: [
                RepairStrategy(
                    fix_type=FixType.ADD_PARAMETER,
                    description="Add missing sessionId parameter",
                    confidence_threshold=0.9,
                    parameters={"parameter": "sessionIdExpression", "value": "={{ $workflow.executionId }}"},
                    risk_level="low"
                )
            ],
            
            ErrorCategory.CREDENTIALS: [
                RepairStrategy(
                    fix_type=FixType.FIX_CREDENTIALS,
                    description="Add or update missing credentials",
                    confidence_threshold=0.8,
                    parameters={"auto_detect_type": True},
                    risk_level="low"
                )
            ],
            
            ErrorCategory.INTERNAL: [
                RepairStrategy(
                    fix_type=FixType.ADD_ERROR_HANDLING,
                    description="Add try-catch error handling",
                    confidence_threshold=0.6,
                    parameters={"wrap_in_try_catch": True, "provide_fallback": True},
                    risk_level="medium"
                ),
                RepairStrategy(
                    fix_type=FixType.REPLACE_NODE,
                    description="Replace with simpler alternative node",
                    confidence_threshold=0.4,
                    parameters={"replacement_type": "n8n-nodes-base.set"},
                    risk_level="high"
                )
            ]
        }
        
        return strategies
    
    async def analyze_error(self, workflow_id: str, error_type: str, error_message: str, 
                          node_name: str = None, execution_id: str = None) -> ErrorAnalysis:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        Args:
            workflow_id: ID workflow'–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            node_name: –ò–º—è –Ω–æ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            execution_id: ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        """
        error_id = f"{workflow_id}_{error_type}_{hash(error_message) % 10000}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if error_id in self.error_cache:
            cached_analysis = self.error_cache[error_id]
            logger.debug(f"üìã Using cached analysis for error {error_id}")
            return cached_analysis
        
        logger.info(f"üß† Analyzing error: {error_type} in workflow {workflow_id}")
        
        # 1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        category, confidence = self._classify_error(error_message, error_type, node_name)
        
        # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ root cause
        root_cause = self._determine_root_cause(error_message, category)
        
        # 3. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        repair_strategies = self._find_repair_strategies(category, error_message, node_name)
        
        # 4. –í—ã–±–æ—Ä –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        best_strategy = self._select_best_strategy(repair_strategies, confidence)
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        analysis = ErrorAnalysis(
            error_id=error_id,
            category=category,
            confidence=confidence,
            description=f"{category.value.title()} error: {root_cause or error_message[:100]}",
            suggested_fix=best_strategy,
            alternative_fixes=repair_strategies[1:] if len(repair_strategies) > 1 else [],
            root_cause=root_cause,
            affected_nodes=[node_name] if node_name else [],
            metadata={
                "workflow_id": workflow_id,
                "execution_id": execution_id,
                "original_error": error_message,
                "error_type": error_type
            }
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∏ –∏—Å—Ç–æ—Ä–∏—é
        self.error_cache[error_id] = analysis
        self.analysis_history.append(analysis)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.analysis_history) > 1000:
            self.analysis_history = self.analysis_history[-1000:]
        
        logger.info(f"‚úÖ Analysis completed: {category.value} (confidence: {confidence:.2f})")
        
        return analysis
    
    def _classify_error(self, error_message: str, error_type: str, node_name: str = None) -> Tuple[ErrorCategory, float]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        error_text = f"{error_message} {error_type}".lower()
        
        category_scores = defaultdict(float)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern in self.error_patterns:
            score = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            keyword_matches = sum(1 for keyword in pattern.keywords if keyword.lower() in error_text)
            if keyword_matches > 0:
                score += (keyword_matches / len(pattern.keywords)) * 0.4
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ regex –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            regex_matches = sum(1 for regex in pattern.regex_patterns if re.search(regex, error_text, re.IGNORECASE))
            if regex_matches > 0:
                score += (regex_matches / len(pattern.regex_patterns)) * 0.4
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –Ω–æ–¥—ã
            if node_name and pattern.node_types:
                node_type_matches = sum(1 for node_type in pattern.node_types if node_type in (node_name or ""))
                if node_type_matches > 0:
                    score += 0.2
            
            # –ë–æ–Ω—É—Å –∑–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            score += pattern.confidence_boost
            
            if score > 0:
                category_scores[pattern.category] += score
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—á–µ—Ç–æ–º
        if category_scores:
            best_category = max(category_scores.items(), key=lambda x: x[1])
            return best_category[0], min(best_category[1], 1.0)
        else:
            return ErrorCategory.UNKNOWN, 0.1
    
    def _determine_root_cause(self, error_message: str, category: ErrorCategory) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏"""
        root_causes = {
            ErrorCategory.AUTHENTICATION: "Invalid or expired authentication credentials",
            ErrorCategory.NETWORK: "Network connectivity or timeout issues",
            ErrorCategory.EXTERNAL_API: "External service unavailable or rate limited",
            ErrorCategory.MAPPING: "Incorrect data mapping or missing fields",
            ErrorCategory.CONFIGURATION: "Missing or incorrect configuration parameters",
            ErrorCategory.CREDENTIALS: "Missing or invalid API credentials",
            ErrorCategory.INTERNAL: "Internal code or logic error"
        }
        
        return root_causes.get(category)
    
    def _find_repair_strategies(self, category: ErrorCategory, error_message: str, node_name: str = None) -> List[RepairStrategy]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        strategies = self.repair_strategies.get(category, [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏
        applicable_strategies = []
        
        for strategy in strategies:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º prerequisites
            if strategy.prerequisites:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                pass
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
            adapted_strategy = self._adapt_strategy(strategy, error_message, node_name)
            applicable_strategies.append(adapted_strategy)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ confidence threshold (–±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–µ)
        applicable_strategies.sort(key=lambda x: x.confidence_threshold, reverse=True)
        
        return applicable_strategies
    
    def _adapt_strategy(self, strategy: RepairStrategy, error_message: str, node_name: str = None) -> RepairStrategy:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        adapted = RepairStrategy(
            fix_type=strategy.fix_type,
            description=strategy.description,
            confidence_threshold=strategy.confidence_threshold,
            parameters=strategy.parameters.copy(),
            prerequisites=strategy.prerequisites.copy(),
            risk_level=strategy.risk_level
        )
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if strategy.fix_type == FixType.FIX_CREDENTIALS:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø credentials –ø–æ –Ω–æ–¥–µ
            if node_name and "openrouter" in node_name.lower():
                adapted.parameters["credential_type"] = "openRouterApi"
                adapted.parameters["credential_id"] = "dctACn3yXSG7qIdH"
            elif node_name and "google" in node_name.lower():
                adapted.parameters["credential_type"] = "googleDriveOAuth2Api"
                adapted.parameters["credential_id"] = "XDM9FIbDJMpu7nGH"
        
        elif strategy.fix_type == FixType.UPDATE_MAPPING:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –æ—à–∏–±–∫–∏
            field_match = re.search(r"property '(\w+)'", error_message)
            if field_match:
                adapted.parameters["problematic_field"] = field_match.group(1)
        
        elif strategy.fix_type == FixType.INCREASE_TIMEOUT:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º timeout –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            if "timeout" in error_message.lower():
                current_timeout = self._extract_timeout_from_error(error_message)
                if current_timeout:
                    adapted.parameters["timeout"] = current_timeout * 2
        
        return adapted
    
    def _extract_timeout_from_error(self, error_message: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timeout –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        timeout_match = re.search(r"timeout.*?(\d+)", error_message, re.IGNORECASE)
        if timeout_match:
            return int(timeout_match.group(1))
        return None
    
    def _select_best_strategy(self, strategies: List[RepairStrategy], error_confidence: float) -> RepairStrategy:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if not strategies:
            # Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            return RepairStrategy(
                fix_type=FixType.ADD_ERROR_HANDLING,
                description="Add generic error handling",
                confidence_threshold=0.3,
                risk_level="medium"
            )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—á–µ—Ç–æ–º confidence –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        best_strategy = strategies[0]
        
        for strategy in strategies:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            strategy_key = f"{strategy.fix_type.value}"
            if strategy_key in self.success_rates:
                success_rate = statistics.mean(self.success_rates[strategy_key])
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º confidence threshold –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                adjusted_threshold = strategy.confidence_threshold * (1 - success_rate * 0.2)
                
                if error_confidence >= adjusted_threshold:
                    best_strategy = strategy
                    break
        
        return best_strategy
    
    def record_fix_result(self, error_id: str, fix_type: FixType, success: bool):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        strategy_key = fix_type.value
        self.success_rates[strategy_key].append(success)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.success_rates[strategy_key]) > 100:
            self.success_rates[strategy_key] = self.success_rates[strategy_key][-100:]
        
        logger.debug(f"üìä Recorded fix result: {fix_type.value} = {'success' if success else 'failure'}")
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫"""
        if not self.analysis_history:
            return {"total_analyses": 0}
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_counts = Counter(analysis.category for analysis in self.analysis_history)
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        avg_confidence = statistics.mean(analysis.confidence for analysis in self.analysis_history)
        
        # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        fix_success_rates = {}
        for fix_type, results in self.success_rates.items():
            if results:
                fix_success_rates[fix_type] = statistics.mean(results)
        
        return {
            "total_analyses": len(self.analysis_history),
            "category_distribution": dict(category_counts),
            "average_confidence": avg_confidence,
            "fix_success_rates": fix_success_rates,
            "cache_size": len(self.error_cache)
        }
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∞–Ω–∞–ª–∏–∑–æ–≤"""
        self.error_cache.clear()
        logger.info("üóëÔ∏è Error analysis cache cleared")
    
    def export_patterns(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        patterns_data = []
        
        for pattern in self.error_patterns:
            patterns_data.append({
                "category": pattern.category.value,
                "keywords": pattern.keywords,
                "regex_patterns": pattern.regex_patterns,
                "node_types": pattern.node_types,
                "confidence_boost": pattern.confidence_boost
            })
        
        return {
            "patterns": patterns_data,
            "exported_at": datetime.now().isoformat()
        }
    
    def import_patterns(self, patterns_data: Dict[str, Any]):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫"""
        try:
            new_patterns = []
            
            for pattern_data in patterns_data.get("patterns", []):
                pattern = ErrorPattern(
                    category=ErrorCategory(pattern_data["category"]),
                    keywords=pattern_data["keywords"],
                    regex_patterns=pattern_data["regex_patterns"],
                    node_types=pattern_data.get("node_types", []),
                    confidence_boost=pattern_data.get("confidence_boost", 0.0)
                )
                new_patterns.append(pattern)
            
            self.error_patterns.extend(new_patterns)
            logger.info(f"üì• Imported {len(new_patterns)} error patterns")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to import patterns: {e}")

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def create_test_analyzer() -> ErrorAnalyzer:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    config = {
        "confidence_threshold": 0.7,
        "enable_learning": True
    }
    
    return ErrorAnalyzer(config)

async def analyze_common_n8n_errors():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ N8N"""
    analyzer = create_test_analyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    test_errors = [
        ("auth_error", "Authentication failed: Invalid API token", "OpenRouter Chat Model"),
        ("session_error", "Session ID is required but not provided", "Simple Memory"),
        ("network_error", "ECONNREFUSED: Connection refused", "HTTP Request"),
        ("mapping_error", "Cannot read property 'data' of undefined", "Set Node"),
        ("timeout_error", "Request timeout after 30000ms", "HTTP Request")
    ]
    
    results = []
    
    for error_type, error_message, node_name in test_errors:
        analysis = await analyzer.analyze_error(
            workflow_id="test_workflow",
            error_type=error_type,
            error_message=error_message,
            node_name=node_name
        )
        results.append(analysis)
        
        print(f"üîç {error_type}:")
        print(f"  Category: {analysis.category.value}")
        print(f"  Confidence: {analysis.confidence:.2f}")
        print(f"  Suggested fix: {analysis.suggested_fix.description}")
        print()
    
    return results
