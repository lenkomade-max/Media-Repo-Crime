#!/usr/bin/env python3
"""
ü§ñ AUTONOMOUS N8N ORCHESTRATOR - –ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è N8N, –∫–æ—Ç–æ—Ä–∞—è:
- –°–æ–∑–¥–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç workflow'—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ü–∏–∫–ª–µ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –í–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-10-02
–í–µ—Ä—Å–∏—è: 1.0
"""

import asyncio
import json
import logging
import signal
import sys
import time
import yaml
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import uuid

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from connector import N8NConnector
from monitor import ExecutionMonitor, ExecutionEvent
from analyzer import ErrorAnalyzer, ErrorAnalysis
from fixer import AutoFixer, FixResult
from test_harness import TestHarness, TestResult
from audit import AuditLogger, AuditEntry
from notifier import NotificationService, NotificationLevel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('orchestrator.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class SystemState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    INITIALIZING = "initializing"
    HEALTHY = "healthy"
    MONITORING = "monitoring"
    ANALYZING = "analyzing"
    FIXING = "fixing"
    TESTING = "testing"
    ESCALATING = "escalating"
    EMERGENCY = "emergency"
    SHUTDOWN = "shutdown"

class IncidentSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"
    EMERGENCY = "emergency"

@dataclass
class Incident:
    """–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ"""
    id: str
    workflow_id: str
    execution_id: Optional[str]
    severity: IncidentSeverity
    error_type: str
    description: str
    created_at: datetime
    attempts: int = 0
    last_attempt_at: Optional[datetime] = None
    resolved: bool = False
    resolved_at: Optional[datetime] = None
    escalated: bool = False
    escalated_at: Optional[datetime] = None

@dataclass
class SystemMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    incidents_total: int = 0
    incidents_resolved: int = 0
    incidents_escalated: int = 0
    average_resolution_time: float = 0.0
    success_rate: float = 0.0
    uptime_percentage: float = 100.0
    last_updated: datetime = None

class AutonomousOrchestrator:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª:
    detect ‚Üí analyze ‚Üí fix ‚Üí verify ‚Üí repeat
    """
    
    def __init__(self, config_path: str = "policy.yml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.config_path = Path(config_path)
        self.config = self._load_config()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.state = SystemState.INITIALIZING
        self.start_time = datetime.now()
        self.shutdown_requested = False
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
        self.active_incidents: Dict[str, Incident] = {}
        self.incident_history: List[Incident] = []
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics = SystemMetrics(last_updated=datetime.now())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("ü§ñ Autonomous Orchestrator initialized")
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.info(f"‚úÖ Configuration loaded from {self.config_path}")
            return config
        except Exception as e:
            logger.error(f"‚ùå Failed to load configuration: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "security": {
                "max_attempts": 5,
                "cooldown_seconds": 300,
                "auto_apply_threshold": 0.8,
                "require_approval_threshold": 0.7
            },
            "monitoring": {
                "poll_interval_seconds": 10,
                "execution_timeout_seconds": 600,
                "health_check_interval_seconds": 60
            },
            "notifications": {
                "channels": {
                    "telegram": {"enabled": False},
                    "slack": {"enabled": False},
                    "email": {"enabled": False}
                }
            }
        }
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # N8N Connector
            self.connector = N8NConnector(
                api_url=self.config.get("integrations", {}).get("n8n", {}).get("api_url"),
                ssh_host=self.config.get("integrations", {}).get("n8n", {}).get("ssh_host")
            )
            
            # Execution Monitor
            self.monitor = ExecutionMonitor(
                connector=self.connector,
                poll_interval=self.config["monitoring"]["poll_interval_seconds"]
            )
            
            # Error Analyzer
            self.analyzer = ErrorAnalyzer(
                config=self.config.get("repair_strategies", {})
            )
            
            # Auto Fixer
            self.fixer = AutoFixer(
                connector=self.connector,
                config=self.config.get("repair_strategies", {})
            )
            
            # Test Harness
            self.test_harness = TestHarness(
                connector=self.connector,
                config=self.config.get("testing", {})
            )
            
            # Audit Logger
            self.audit = AuditLogger(
                config=self.config.get("audit", {})
            )
            
            # Notification Service
            self.notifier = NotificationService(
                config=self.config.get("notifications", {})
            )
            
            logger.info("‚úÖ All components initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize components: {e}")
            raise
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üì° Received signal {signum}, initiating shutdown...")
        self.shutdown_requested = True
    
    async def run(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        –†–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º:
        1. Health check —Å–∏—Å—Ç–µ–º—ã
        2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        3. –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
        4. –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        6. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        7. –ü–æ–≤—Ç–æ—Ä —Ü–∏–∫–ª–∞
        """
        logger.info("üöÄ Starting autonomous orchestration cycle")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            if not await self._system_health_check():
                logger.error("‚ùå System health check failed, cannot start")
                return False
            
            self.state = SystemState.HEALTHY
            await self.notifier.send_notification(
                "üöÄ Autonomous N8N Orchestrator started",
                NotificationLevel.INFO
            )
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while not self.shutdown_requested:
                cycle_start = time.time()
                
                try:
                    # 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
                    await self._monitoring_phase()
                    
                    # 2. –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
                    if self.active_incidents:
                        await self._analysis_phase()
                    
                    # 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    if self.active_incidents:
                        await self._fixing_phase()
                    
                    # 4. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
                    await self._maintenance_tasks()
                    
                    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    self._update_metrics()
                    
                except Exception as e:
                    logger.error(f"üí• Error in orchestration cycle: {e}")
                    await self.notifier.send_notification(
                        f"‚ùå Orchestration cycle error: {e}",
                        NotificationLevel.CRITICAL
                    )
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã —Ü–∏–∫–ª–æ–≤
                cycle_duration = time.time() - cycle_start
                sleep_time = max(0, self.config["monitoring"]["poll_interval_seconds"] - cycle_duration)
                
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
            
            # Graceful shutdown
            await self._shutdown()
            return True
            
        except Exception as e:
            logger.error(f"üí• Critical error in orchestrator: {e}")
            self.state = SystemState.EMERGENCY
            await self.notifier.send_notification(
                f"üö® EMERGENCY: Orchestrator critical error: {e}",
                NotificationLevel.EMERGENCY
            )
            return False
    
    async def _system_health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç Performing system health check...")
        
        health_status = {
            "n8n": False,
            "postgresql": False,
            "mcp_server": False,
            "components": False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ N8N
            health_status["n8n"] = await self.connector.health_check()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
            health_status["postgresql"] = await self.connector.database_health_check()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP Server
            health_status["mcp_server"] = await self.connector.mcp_server_health_check()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            health_status["components"] = all([
                self.monitor is not None,
                self.analyzer is not None,
                self.fixer is not None,
                self.test_harness is not None,
                self.audit is not None,
                self.notifier is not None
            ])
            
            overall_health = all(health_status.values())
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for component, status in health_status.items():
                status_emoji = "‚úÖ" if status else "‚ùå"
                logger.info(f"  {status_emoji} {component.upper()}: {'Healthy' if status else 'Unhealthy'}")
            
            if overall_health:
                logger.info("‚úÖ System health check passed")
            else:
                logger.error("‚ùå System health check failed")
                await self.notifier.send_notification(
                    f"üè• System health check failed: {health_status}",
                    NotificationLevel.CRITICAL
                )
            
            return overall_health
            
        except Exception as e:
            logger.error(f"üí• Health check error: {e}")
            return False
    
    async def _monitoring_phase(self):
        """–§–∞–∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        self.state = SystemState.MONITORING
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞
            events = await self.monitor.get_recent_events()
            
            for event in events:
                if event.has_errors():
                    await self._handle_execution_error(event)
            
        except Exception as e:
            logger.error(f"‚ùå Monitoring phase error: {e}")
    
    async def _handle_execution_error(self, event: ExecutionEvent):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        incident_id = str(uuid.uuid4())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
        severity = self._determine_severity(event)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        incident = Incident(
            id=incident_id,
            workflow_id=event.workflow_id,
            execution_id=event.execution_id,
            severity=severity,
            error_type=event.error_type,
            description=event.error_message,
            created_at=datetime.now()
        )
        
        self.active_incidents[incident_id] = incident
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        await self.audit.log_incident_created(incident)
        
        logger.warning(f"üö® New incident detected: {incident_id} ({severity.value})")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö
        if severity in [IncidentSeverity.CRITICAL, IncidentSeverity.EMERGENCY]:
            await self.notifier.send_notification(
                f"üö® {severity.value.upper()} incident: {incident.description}",
                NotificationLevel.CRITICAL if severity == IncidentSeverity.CRITICAL else NotificationLevel.EMERGENCY
            )
    
    def _determine_severity(self, event: ExecutionEvent) -> IncidentSeverity:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        if "authentication" in event.error_message.lower():
            return IncidentSeverity.HIGH
        elif "timeout" in event.error_message.lower():
            return IncidentSeverity.MEDIUM
        elif "network" in event.error_message.lower():
            return IncidentSeverity.MEDIUM
        elif "critical" in event.error_message.lower():
            return IncidentSeverity.CRITICAL
        else:
            return IncidentSeverity.LOW
    
    async def _analysis_phase(self):
        """–§–∞–∑–∞ –∞–Ω–∞–ª–∏–∑–∞ - –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
        self.state = SystemState.ANALYZING
        
        for incident_id, incident in list(self.active_incidents.items()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
                if self._is_in_cooldown(incident):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                if incident.attempts >= self.config["security"]["max_attempts"]:
                    await self._escalate_incident(incident)
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                analysis = await self.analyzer.analyze_error(
                    incident.workflow_id,
                    incident.error_type,
                    incident.description
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è
                if analysis.confidence >= self.config["security"]["auto_apply_threshold"]:
                    incident.analysis = analysis
                    logger.info(f"üìä Analysis completed for incident {incident_id}: confidence {analysis.confidence:.2f}")
                elif analysis.confidence >= self.config["security"]["require_approval_threshold"]:
                    await self._request_approval(incident, analysis)
                else:
                    logger.warning(f"‚ö†Ô∏è Low confidence analysis for incident {incident_id}: {analysis.confidence:.2f}")
                
            except Exception as e:
                logger.error(f"‚ùå Analysis error for incident {incident_id}: {e}")
    
    def _is_in_cooldown(self, incident: Incident) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ cooldown –ø–µ—Ä–∏–æ–¥–µ"""
        if incident.last_attempt_at is None:
            return False
        
        cooldown_seconds = self.config["security"]["cooldown_seconds"]
        time_since_last_attempt = datetime.now() - incident.last_attempt_at
        
        return time_since_last_attempt.total_seconds() < cooldown_seconds
    
    async def _fixing_phase(self):
        """–§–∞–∑–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        self.state = SystemState.FIXING
        
        for incident_id, incident in list(self.active_incidents.items()):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤ cooldown
                if not hasattr(incident, 'analysis') or self._is_in_cooldown(incident):
                    continue
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                incident.attempts += 1
                incident.last_attempt_at = datetime.now()
                
                logger.info(f"üîß Applying fix for incident {incident_id} (attempt {incident.attempts})")
                
                fix_result = await self.fixer.apply_fix(
                    incident.workflow_id,
                    incident.analysis
                )
                
                if fix_result.success:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    test_result = await self._test_fix(incident, fix_result)
                    
                    if test_result.success:
                        await self._resolve_incident(incident)
                    else:
                        logger.warning(f"‚ö†Ô∏è Fix test failed for incident {incident_id}")
                else:
                    logger.error(f"‚ùå Fix application failed for incident {incident_id}: {fix_result.error}")
                
            except Exception as e:
                logger.error(f"‚ùå Fixing error for incident {incident_id}: {e}")
    
    async def _test_fix(self, incident: Incident, fix_result: FixResult) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        self.state = SystemState.TESTING
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ staging —Å—Ä–µ–¥–µ
            test_result = await self.test_harness.test_workflow(
                incident.workflow_id,
                test_type="fix_validation"
            )
            
            return test_result
            
        except Exception as e:
            logger.error(f"‚ùå Test error: {e}")
            return TestResult(success=False, error=str(e))
    
    async def _resolve_incident(self, incident: Incident):
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç"""
        incident.resolved = True
        incident.resolved_at = datetime.now()
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.incident_history.append(incident)
        del self.active_incidents[incident.id]
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        await self.audit.log_incident_resolved(incident)
        
        logger.info(f"‚úÖ Incident {incident.id} resolved successfully")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        await self.notifier.send_notification(
            f"‚úÖ Incident resolved: {incident.description}",
            NotificationLevel.INFO
        )
    
    async def _escalate_incident(self, incident: Incident):
        """–≠—Å–∫–∞–ª–∏—Ä—É–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç"""
        self.state = SystemState.ESCALATING
        
        incident.escalated = True
        incident.escalated_at = datetime.now()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
        await self.audit.log_incident_escalated(incident)
        
        logger.warning(f"‚¨ÜÔ∏è Incident {incident.id} escalated after {incident.attempts} attempts")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        await self.notifier.send_notification(
            f"‚¨ÜÔ∏è ESCALATION: Incident {incident.id} requires manual intervention\n"
            f"Workflow: {incident.workflow_id}\n"
            f"Error: {incident.description}\n"
            f"Attempts: {incident.attempts}",
            NotificationLevel.CRITICAL
        )
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.incident_history.append(incident)
        del self.active_incidents[incident.id]
    
    async def _request_approval(self, incident: Incident, analysis: ErrorAnalysis):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        logger.info(f"üë§ Requesting approval for incident {incident.id}")
        
        approval_message = (
            f"ü§ñ APPROVAL REQUIRED\n\n"
            f"Incident: {incident.id}\n"
            f"Workflow: {incident.workflow_id}\n"
            f"Error: {incident.description}\n"
            f"Proposed fix: {analysis.suggested_fix}\n"
            f"Confidence: {analysis.confidence:.2f}\n\n"
            f"Reply with 'APPROVE {incident.id}' or 'REJECT {incident.id}'"
        )
        
        await self.notifier.send_notification(
            approval_message,
            NotificationLevel.WARNING
        )
    
    async def _maintenance_tasks(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
        health_check_interval = self.config["monitoring"]["health_check_interval_seconds"]
        if not hasattr(self, '_last_health_check'):
            self._last_health_check = current_time
        
        if (current_time - self._last_health_check).total_seconds() >= health_check_interval:
            await self._system_health_check()
            self._last_health_check = current_time
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        cutoff_time = current_time - timedelta(days=7)
        self.incident_history = [
            incident for incident in self.incident_history
            if incident.created_at > cutoff_time
        ]
    
    def _update_metrics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        total_incidents = len(self.incident_history) + len(self.active_incidents)
        resolved_incidents = len([i for i in self.incident_history if i.resolved])
        escalated_incidents = len([i for i in self.incident_history if i.escalated])
        
        self.metrics.incidents_total = total_incidents
        self.metrics.incidents_resolved = resolved_incidents
        self.metrics.incidents_escalated = escalated_incidents
        
        if total_incidents > 0:
            self.metrics.success_rate = resolved_incidents / total_incidents
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        resolved_with_time = [
            i for i in self.incident_history
            if i.resolved and i.resolved_at and i.created_at
        ]
        
        if resolved_with_time:
            total_resolution_time = sum([
                (i.resolved_at - i.created_at).total_seconds()
                for i in resolved_with_time
            ])
            self.metrics.average_resolution_time = total_resolution_time / len(resolved_with_time)
        
        # Uptime
        uptime_seconds = (datetime.now() - self.start_time).total_seconds()
        self.metrics.uptime_percentage = min(100.0, (uptime_seconds / (uptime_seconds + 1)) * 100)
        
        self.metrics.last_updated = datetime.now()
    
    async def _shutdown(self):
        """Graceful shutdown —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë Initiating graceful shutdown...")
        self.state = SystemState.SHUTDOWN
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ shutdown
        await self.notifier.send_notification(
            "üõë Autonomous N8N Orchestrator shutting down",
            NotificationLevel.INFO
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self._save_state()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if hasattr(self, 'connector'):
            await self.connector.close()
        
        logger.info("‚úÖ Graceful shutdown completed")
    
    async def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            state_data = {
                "active_incidents": [asdict(incident) for incident in self.active_incidents.values()],
                "metrics": asdict(self.metrics),
                "shutdown_time": datetime.now().isoformat()
            }
            
            with open("orchestrator_state.json", "w") as f:
                json.dump(state_data, f, indent=2, default=str)
            
            logger.info("üíæ System state saved")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to save state: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "state": self.state.value,
            "uptime": str(datetime.now() - self.start_time),
            "active_incidents": len(self.active_incidents),
            "metrics": asdict(self.metrics),
            "config_version": self.config.get("versioning", {}).get("config_version", "unknown")
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Autonomous N8N Orchestrator")
    print("=" * 50)
    print("üéØ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è N8N")
    print("üîÑ –¶–∏–∫–ª: detect ‚Üí analyze ‚Üí fix ‚Üí verify ‚Üí repeat")
    print("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∞—É–¥–∏—Ç–æ–º")
    print("üöÄ –†–µ–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–µ –∏–º–∏—Ç–∞—Ü–∏—è!")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = AutonomousOrchestrator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        success = await orchestrator.run()
        
        if success:
            print("‚úÖ Orchestrator completed successfully")
            return 0
        else:
            print("‚ùå Orchestrator failed")
            return 1
            
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user")
        return 0
    except Exception as e:
        print(f"\nüí• Critical error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
