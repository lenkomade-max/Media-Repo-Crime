#!/usr/bin/env python3
"""
üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û WORKFLOW

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è workflow 3TuNc9SUt9EDDqii
"""

import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from orchestrator import AutonomousOrchestrator, Incident, IncidentSeverity
from connector import N8NConnector
from analyzer import ErrorAnalyzer
from fixer import AutoFixer
from monitor import ExecutionMonitor, ExecutionEvent, EventType, Severity
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fix_workflow.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

async def fix_workflow_3TuNc9SUt9EDDqii():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π workflow –∏—Å–ø–æ–ª—å–∑—É—è –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    workflow_id = "3TuNc9SUt9EDDqii"
    workflow_url = "https://mayersn8n.duckdns.org/workflow/3TuNc9SUt9EDDqii"
    
    print("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WORKFLOW 3TuNc9SUt9EDDqii")
    print("=" * 60)
    print(f"üÜî Workflow ID: {workflow_id}")
    print(f"üåê URL: {workflow_url}")
    print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É N8N")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # N8N Connector
        connector = N8NConnector()
        await connector.connect()
        print("‚úÖ N8N Connector –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # Error Analyzer
        analyzer = ErrorAnalyzer()
        print("‚úÖ Error Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # Auto Fixer
        fixer = AutoFixer(connector)
        print("‚úÖ Auto Fixer –≥–æ—Ç–æ–≤")
        
        # Execution Monitor
        monitor = ExecutionMonitor(connector, poll_interval=10)
        print("‚úÖ Execution Monitor –≥–æ—Ç–æ–≤")
        
        print()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ workflow
        print("üîç –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ workflow...")
        workflow_info = await connector.get_workflow_by_id(workflow_id)
        
        if not workflow_info:
            print(f"‚ùå Workflow {workflow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"‚úÖ Workflow –Ω–∞–π–¥–µ–Ω: {workflow_info.name}")
        print(f"   üìä –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if workflow_info.active else '‚ùå'}")
        print(f"   üì¶ Nodes: {workflow_info.nodes_count}")
        print()
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º nodes workflow
        print("üîç –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ nodes workflow...")
        nodes = await connector.get_workflow_nodes(workflow_id)
        
        if not nodes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nodes workflow")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(nodes)} nodes")
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ nodes
        issues_found = []
        
        for i, node in enumerate(nodes):
            print(f"   üîç Node {i+1}: {node.name} ({node.type})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            node_issues = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Memory Buffer Window
            if "memoryBufferWindow" in node.type:
                if "sessionId" not in node.parameters and "sessionIdExpression" not in node.parameters:
                    node_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter Chat Model
            elif "lmChatOpenRouter" in node.type:
                if not node.credentials or "openRouterApi" not in node.credentials:
                    node_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç OpenRouter credentials")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP Request
            elif node.type == "n8n-nodes-base.httpRequest":
                if not node.parameters.get("url"):
                    node_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Code node
            elif node.type == "n8n-nodes-base.code":
                if not node.parameters.get("jsCode"):
                    node_issues.append("–ü—É—Å—Ç–æ–π –∫–æ–¥")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Drive
            elif "googleDrive" in node.type:
                if not node.credentials or "googleDriveOAuth2Api" not in node.credentials:
                    node_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Google Drive credentials")
            
            if node_issues:
                print(f"      ‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(node_issues)}")
                for issue in node_issues:
                    issues_found.append({
                        "node_id": node.id,
                        "node_name": node.name,
                        "node_type": node.type,
                        "issue": issue
                    })
            else:
                print(f"      ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º")
        
        print()
        
        if not issues_found:
            print("üéâ –ü—Ä–æ–±–ª–µ–º—ã –≤ workflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º workflow –µ—Å–ª–∏ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            if not workflow_info.active:
                print("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow...")
                await connector.activate_workflow(workflow_id)
                print("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            return True
        
        # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        print(f"üîß –≠—Ç–∞–ø 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(issues_found)} –ø—Ä–æ–±–ª–µ–º...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        for issue_data in issues_found:
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {issue_data['issue']} –≤ {issue_data['node_name']}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            analysis = await analyzer.analyze_error(
                workflow_id=workflow_id,
                error_type="configuration_error",
                error_message=issue_data['issue'],
                node_name=issue_data['node_name']
            )
            
            print(f"   üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.category.value}")
            print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
            print(f"   üí° –†–µ—à–µ–Ω–∏–µ: {analysis.suggested_fix.description}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if analysis.confidence >= 0.7:  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                fix_result = await fixer.apply_fix(workflow_id, analysis)
                
                if fix_result.success:
                    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {fix_result.error}")
            else:
                print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        print()
        
        # 4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º workflow
        print("üîÑ –≠—Ç–∞–ø 4: –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow...")
        activation_success = await connector.activate_workflow(workflow_id)
        
        if activation_success:
            print("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ workflow")
            return False
        
        print()
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow
        print("üß™ –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
        execution_id = await connector.execute_workflow(
            workflow_id, 
            {"topic": "–¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ workflow"}
        )
        
        if execution_id:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {execution_id}")
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
            await asyncio.sleep(30)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            execution_info = await connector.get_execution_status(execution_id)
            
            if execution_info:
                print(f"üìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_info.status}")
                print(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {'‚úÖ' if execution_info.finished else '‚ùå'}")
                
                if execution_info.status == "success":
                    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
                    return True
                else:
                    print("‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    errors = await connector.get_execution_errors(execution_id)
                    if errors:
                        print("‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:")
                        for error in errors:
                            print(f"   ‚Ä¢ {error['node']}: {error['error'].get('message', 'Unknown error')}")
                    
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return False
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("Critical error in workflow fixing")
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if 'connector' in locals():
            await connector.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await fix_workflow_3TuNc9SUt9EDDqii()
        
        if success:
            print("\nüéâ WORKFLOW –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù!")
            print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
            print("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            print("üöÄ Workflow –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print()
            print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: https://mayersn8n.duckdns.org/workflow/3TuNc9SUt9EDDqii")
            print("‚ñ∂Ô∏è –ù–∞–∂–º–∏—Ç–µ 'Execute Workflow' –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return 0
        else:
            print("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–ò–¢–¨ WORKFLOW")
            print("üîß –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            return 1
            
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))


