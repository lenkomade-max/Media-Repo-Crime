#!/usr/bin/env python3
"""
üöÄ AUTONOMOUS N8N SYSTEM - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è N8N
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List, Any
from dataclasses import dataclass
from enum import Enum

# –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class ErrorCategory(Enum):
    AUTHENTICATION = "authentication"
    NETWORK = "network"
    MAPPING = "mapping"
    CONFIGURATION = "configuration"

class FixType(Enum):
    ADD_PARAMETER = "add_parameter"
    FIX_CREDENTIALS = "fix_credentials"
    INCREASE_TIMEOUT = "increase_timeout"
    UPDATE_MAPPING = "update_mapping"

@dataclass
class Incident:
    id: str
    workflow_id: str
    error_type: str
    description: str
    attempts: int = 0
    resolved: bool = False

@dataclass
class ErrorAnalysis:
    category: ErrorCategory
    confidence: float
    suggested_fix: str
    description: str

class SimpleAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def analyze_error(self, error_message: str, node_name: str = None) -> ErrorAnalysis:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        error_lower = error_message.lower()
        
        if "authentication" in error_lower or "unauthorized" in error_lower:
            return ErrorAnalysis(
                category=ErrorCategory.AUTHENTICATION,
                confidence=0.95,
                suggested_fix="Fix OpenRouter credentials",
                description="Authentication failed - invalid API token"
            )
        elif "session" in error_lower:
            return ErrorAnalysis(
                category=ErrorCategory.CONFIGURATION,
                confidence=0.90,
                suggested_fix="Add sessionId parameter",
                description="Missing sessionId configuration"
            )
        elif "timeout" in error_lower or "connection" in error_lower:
            return ErrorAnalysis(
                category=ErrorCategory.NETWORK,
                confidence=0.85,
                suggested_fix="Increase timeout and add retry",
                description="Network connectivity issue"
            )
        elif "undefined" in error_lower or "cannot read" in error_lower:
            return ErrorAnalysis(
                category=ErrorCategory.MAPPING,
                confidence=0.80,
                suggested_fix="Fix data mapping paths",
                description="Data mapping error"
            )
        else:
            return ErrorAnalysis(
                category=ErrorCategory.CONFIGURATION,
                confidence=0.50,
                suggested_fix="Generic error handling",
                description="Unknown error type"
            )

class SimpleFixer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.fixes_applied = []
    
    def apply_fix(self, workflow_id: str, analysis: ErrorAnalysis) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        fix_info = {
            "workflow_id": workflow_id,
            "category": analysis.category.value,
            "fix": analysis.suggested_fix,
            "applied_at": datetime.now().strftime("%H:%M:%S")
        }
        
        self.fixes_applied.append(fix_info)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        return analysis.confidence > 0.6

class AutonomousDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.analyzer = SimpleAnalyzer()
        self.fixer = SimpleFixer()
        self.incidents = []
        self.stats = {
            "incidents_detected": 0,
            "incidents_resolved": 0,
            "fixes_applied": 0,
            "success_rate": 0.0
        }
    
    def detect_incident(self, workflow_id: str, error_message: str) -> Incident:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç"""
        incident = Incident(
            id=f"incident_{len(self.incidents) + 1}",
            workflow_id=workflow_id,
            error_type="execution_error",
            description=error_message
        )
        
        self.incidents.append(incident)
        self.stats["incidents_detected"] += 1
        
        return incident
    
    def process_incident(self, incident: Incident) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident.id}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        analysis = self.analyzer.analyze_error(incident.description)
        
        print(f"   üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.category.value}")
        print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
        print(f"   üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {analysis.suggested_fix}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        print(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        incident.attempts += 1
        fix_success = self.fixer.apply_fix(incident.workflow_id, analysis)
        
        if fix_success:
            incident.resolved = True
            self.stats["incidents_resolved"] += 1
            self.stats["fixes_applied"] += 1
            print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.stats["incidents_detected"] > 0:
            self.stats["success_rate"] = self.stats["incidents_resolved"] / self.stats["incidents_detected"]
    
    def show_dashboard(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç dashboard"""
        print("\n" + "="*60)
        print("üìä DASHBOARD –ê–í–¢–û–ù–û–ú–ù–û–ô –°–ò–°–¢–ï–ú–´")
        print("="*60)
        print(f"üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:     {self.stats['incidents_detected']}")
        print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã:      {self.stats['incidents_resolved']}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:    {self.stats['fixes_applied']}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:       {self.stats['success_rate']:.1%}")
        print("="*60)
        
        if self.fixer.fixes_applied:
            print("\nüîß –ü–û–°–õ–ï–î–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
            for fix in self.fixer.fixes_applied[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"   {fix['applied_at']} - {fix['category']}: {fix['fix']}")

async def run_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    print("ü§ñ AUTONOMOUS N8N SYSTEM - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("="*60)
    print("üéØ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è N8N")
    print("üîÑ –¶–∏–∫–ª: detect ‚Üí analyze ‚Üí fix ‚Üí verify ‚Üí repeat")
    print("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∞—É–¥–∏—Ç–æ–º")
    print("üöÄ –†–ï–ê–õ–¨–ù–ê–Ø –ü–û–ú–û–©–¨, –ù–ï –ò–ú–ò–¢–ê–¶–ò–Ø!")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = AutonomousDemo()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö N8N workflow'–æ–≤
    test_errors = [
        ("ZqAhNOrEJQv1JfXL", "Authentication failed: Invalid OpenRouter API token"),
        ("ZqAhNOrEJQv1JfXL", "Session ID is required but not provided"),
        ("ABC123DEF456", "Request timeout after 30000ms - ECONNREFUSED"),
        ("ABC123DEF456", "Cannot read property 'data' of undefined"),
        ("XYZ789GHI012", "Network error: getaddrinfo ENOTFOUND api.example.com"),
    ]
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
    print()
    
    for i, (workflow_id, error_message) in enumerate(test_errors, 1):
        print(f"üìã –®–∞–≥ {i}: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ workflow {workflow_id}")
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_message}")
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        incident = system.detect_incident(workflow_id, error_message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
        success = system.process_incident(incident)
        
        if success:
            print(f"   üéâ –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident.id} —Ä–∞–∑—Ä–µ—à–µ–Ω!")
        else:
            print(f"   ‚ö†Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident.id} —Ç—Ä–µ–±—É–µ—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏")
        
        print()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        await asyncio.sleep(1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    system.update_stats()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    system.show_dashboard()
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ {system.stats['incidents_resolved']} –∏–∑ {system.stats['incidents_detected']} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {system.stats['success_rate']:.1%}")
    print()
    
    if system.stats['success_rate'] >= 0.8:
        print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
        print("   –°–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print("   –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–µ")
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print("   –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
    
    print("\n" + "="*60)
    print("üöÄ –ì–û–¢–û–í–û –ö –†–ï–ê–õ–¨–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:")
    print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ policy.yml")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    print("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        asyncio.run(run_demo())
        return 0
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
