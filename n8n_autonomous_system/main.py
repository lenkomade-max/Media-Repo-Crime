#!/usr/bin/env python3
"""
üöÄ AUTONOMOUS N8N SYSTEM - –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ–∞–π–ª

–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è N8N workflow'–∞–º–∏:
- –°–æ–∑–¥–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç workflow'—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ü–∏–∫–ª–µ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
- –í–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-10-02
–í–µ—Ä—Å–∏—è: 1.0
"""

import asyncio
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from orchestrator import AutonomousOrchestrator

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('autonomous_system.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ AUTONOMOUS N8N SYSTEM")
    print("=" * 60)
    print("üéØ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è N8N")
    print("üîÑ –¶–∏–∫–ª: detect ‚Üí analyze ‚Üí fix ‚Üí verify ‚Üí repeat")
    print("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∞—É–¥–∏—Ç–æ–º")
    print("üöÄ –†–ï–ê–õ–¨–ù–ê–Ø –ü–û–ú–û–©–¨, –ù–ï –ò–ú–ò–¢–ê–¶–ò–Ø!")
    print()
    
    setup_logging()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = AutonomousOrchestrator("policy.yml")
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        success = await orchestrator.run()
        
        if success:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
            return 0
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("Critical error in main")
        return 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
