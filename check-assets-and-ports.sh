#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Å—Å–µ—Ç–æ–≤ –∏ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è media-video-maker
# –°–æ–≥–ª–∞—Å–Ω–æ TODO_FIX_PLAN.md –∑–∞–¥–∞—á–∏ #10-11

echo "üîç –ü–†–û–í–ï–†–ö–ê –ê–°–°–ï–¢–û–í –ò –ü–û–†–¢–û–í"
echo "============================="

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ VHS –∞—Å—Å–µ—Ç–æ–≤
echo ""
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ VHS —Ñ–∞–π–ª–æ–≤:"
VHS_FILES=(
    "/root/media-video-maker_project/assets/VHS 01 Effect.mp4"
    "/root/media-video-maker_project/assets/VHS 02 Effect.mp4"
)

for vhs_file in "${VHS_FILES[@]}"; do
    if [ -f "$vhs_file" ]; then
        echo "‚úÖ $vhs_file ($(du -h "$vhs_file" | cut -f1))"
    else
        echo "‚ùå $vhs_file (–ù–ï –ù–ê–ô–î–ï–ù)"
    fi
done

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–ª–∏–Ω–∫–∞ CRIME MATERIAL
echo ""
echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–ª–∏–Ω–∫–∞ CRIME MATERIAL:"
if [ -L "/root/CRIME MATERIAL" ]; then
    target=$(readlink "/root/CRIME MATERIAL")
    echo "‚úÖ –°–∏–º–ª–∏–Ω–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: /root/CRIME MATERIAL -> $target"
elif [ -d "/root/CRIME MATERIAL" ]; then
    echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: /root/CRIME MATERIAL"
    echo "   –§–∞–π–ª–æ–≤: $(ls -1 "/root/CRIME MATERIAL" 2>/dev/null | wc -l)"
else
    echo "‚ùå /root/CRIME MATERIAL –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üí° –°–æ–∑–¥–∞–π—Ç–µ —Å–∏–º–ª–∏–Ω–∫: ln -s /path/to/crime/materials \"/root/CRIME MATERIAL\""
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
echo ""
echo "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
PORTS=(4124 5123 8080)
for port in "${PORTS[@]}"; do
    if netstat -tuln 2>/dev/null | grep ":$port " > /dev/null; then
        echo "üî¥ –ü–æ—Ä—Ç $port –ó–ê–ù–Ø–¢"
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        process=$(lsof -ti :$port 2>/dev/null | head -1)
        if [ -n "$process" ]; then
            echo "   –ü—Ä–æ—Ü–µ—Å—Å: $(ps -p $process -o pid,comm= 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")"
        fi
    else
        echo "‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à—Ä–∏—Ñ—Ç–æ–≤ (–ó–∞–¥–∞—á–∞ #17)
echo ""
echo "üî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤:"

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
FONT_PATHS=(
    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
    "/usr/share/fonts/dejavu/DejaVuSans.ttf"
    "/usr/share/fonts/TTF/DejaVuSans.ttf"
    "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf"
    "/usr/share/fonts/liberation/LiberationSans-Regular.ttf"
    "/System/Library/Fonts/Helvetica.ttc"
    "/System/Library/Fonts/Arial.ttf"
)

FOUND_FONT=""
for font in "${FONT_PATHS[@]}"; do
    if [ -f "$font" ]; then
        echo "‚úÖ $font ($(du -h "$font" | cut -f1))"
        [ -z "$FOUND_FONT" ] && FOUND_FONT="$font"
    else
        echo "‚ö†Ô∏è  $font (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
    fi
done

if [ -n "$FOUND_FONT" ]; then
    echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —à—Ä–∏—Ñ—Ç: $FOUND_FONT"
else
    echo "‚ùå –®—Ä–∏—Ñ—Ç—ã –ù–ï –ù–ê–ô–î–ï–ù–´!"
    echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt-get install fonts-dejavu-core (Linux)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ FONT_FILE env
if [ -n "$FONT_FILE" ]; then
    if [ -f "$FONT_FILE" ]; then
        echo "‚úÖ FONT_FILE: $FONT_FILE"
    else
        echo "‚ùå FONT_FILE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $FONT_FILE"
    fi
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ OUTPUT_DIR (–ó–∞–¥–∞—á–∞ #18)
echo ""
echo "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ OUTPUT_DIR:"
OUTPUT_DIR="${OUTPUT_DIR:-/app/output}"

if [ -d "$OUTPUT_DIR" ]; then
    PERMISSIONS=$(ls -ld "$OUTPUT_DIR" | cut -d' ' -f1)
    OWNER=$(ls -ld "$OUTPUT_DIR" | awk '{print $3":"$4}')
    SIZE=$(du -sh "$OUTPUT_DIR" 2>/dev/null | cut -f1 || echo "unknown")
    
    echo "‚úÖ $OUTPUT_DIR —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    echo "   –ü—Ä–∞–≤–∞: $PERMISSIONS ($OWNER)"
    echo "   –†–∞–∑–º–µ—Ä: $SIZE"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏
    if touch "$OUTPUT_DIR/.write_test_$$" 2>/dev/null; then
        echo "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω–∞"
        rm -f "$OUTPUT_DIR/.write_test_$$"
    else
        echo "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏!"
        echo "üí° –ò—Å–ø—Ä–∞–≤–∏—Ç—å: chmod 755 $OUTPUT_DIR"
    fi
    
    # –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    OLD_COUNT=$(find "$OUTPUT_DIR" -name "video_*.mp4" -mtime +1 2>/dev/null | wc -l || echo 0)
    if [ "$OLD_COUNT" -gt 0 ]; then
        echo "‚ö†Ô∏è  –°—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: $OLD_COUNT (>24—á)"
        echo "üí° –û—á–∏—Å—Ç–∫–∞: find $OUTPUT_DIR -name 'video_*.mp4' -mtime +1 -delete"
    fi
    
else
    echo "‚ùå $OUTPUT_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    echo "üí° –°–æ–∑–¥–∞—Ç—å: mkdir -p $OUTPUT_DIR && chmod 755 $OUTPUT_DIR"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å
    if mkdir -p "$OUTPUT_DIR" 2>/dev/null; then
        echo "‚úÖ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: $OUTPUT_DIR"
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å (–Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å)"
    fi
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Whisper CLI (–ó–∞–¥–∞—á–∞ #14)
echo ""
echo "üé§ –ü—Ä–æ–≤–µ—Ä–∫–∞ Whisper CLI:"

# Python
if command -v python3 >/dev/null 2>&1; then
    python_version=$(python3 --version 2>&1)
    echo "‚úÖ $python_version"
else
    echo "‚ùå Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# Whisper CLI
if command -v whisper >/dev/null 2>&1; then
    whisper_version=$(whisper --version 2>&1 | head -1)
    echo "‚úÖ Whisper: $whisper_version"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    echo "   –ú–æ–¥–µ–ª–∏ Whisper:"
    for model in tiny base small medium large; do
        model_path="$HOME/.cache/whisper/$model.pt"
        if [ -f "$model_path" ]; then
            echo "   ‚úÖ $model ($(du -h "$model_path" | cut -f1))"
        else
            echo "   ‚ö†Ô∏è  $model (–Ω–µ —Å–∫–∞—á–∞–Ω–∞)"
        fi
    done
    
    # –¢–µ—Å—Ç Whisper
    echo "   üß™ –¢–µ—Å—Ç Whisper (5—Å–µ–∫ –∞—É–¥–∏–æ):"
    if [ -f "/tmp/test_whisper.wav" ] || ffmpeg -f lavfi -i "sine=frequency=1000:duration=2" -ar 16000 -ac 1 /tmp/test_whisper.wav -y >/dev/null 2>&1; then
        if whisper /tmp/test_whisper.wav --model tiny --output_format srt --output_dir /tmp >/dev/null 2>&1; then
            if [ -f "/tmp/test_whisper.srt" ]; then
                echo "   ‚úÖ SRT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç ($(wc -l < /tmp/test_whisper.srt) —Å—Ç—Ä–æ–∫)"
                rm -f /tmp/test_whisper.srt
            else
                echo "   ‚ùå SRT —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è"
            fi
        else
            echo "   ‚ùå Whisper –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞"
        fi
        rm -f /tmp/test_whisper.wav
    else
        echo "   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ"
    fi
    
else
    echo "‚ùå Whisper CLI –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install openai-whisper"
fi

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ TTS —Å–µ—Ä–≤–µ—Ä–æ–≤
echo ""
echo "üîä –ü—Ä–æ–≤–µ—Ä–∫–∞ TTS —Å–µ—Ä–≤–µ—Ä–æ–≤:"
TTS_ENDPOINTS=(
    "http://localhost:8000/synthesize"
    "http://localhost:8000/health"
)

for endpoint in "${TTS_ENDPOINTS[@]}"; do
    if curl -s --connect-timeout 3 "$endpoint" >/dev/null 2>&1; then
        echo "‚úÖ $endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "‚ùå $endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
done

echo ""
echo "üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
