import { buildSlidesVideo } from "../pipeline/ConcatPlanBuilder.js";
import { MediaProcessor, MediaAnalyzer } from "../pipeline/MediaProcessor.js";
import { PlanInput } from "../types/plan.js";
import fs from "fs/promises";
import path from "path";

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –º–µ–¥–∏–∞ pipeline - –≠—Ç–∞–ø 3
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
 */

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testPlanInput: PlanInput = {
  files: [
    {
      id: "test-photo-1",
      src: "/root/video_factory/prepared/photo1.jpg",
      type: "photo",
      durationSec: 3
    },
    {
      id: "test-photo-2", 
      src: "/root/video_factory/prepared/photo2.jpg",
      type: "photo",
      durationSec: 2
    },
    {
      id: "test-photo-3",
      src: "/root/video_factory/prepared/photo3.jpg", 
      type: "photo",
      durationSec: 4
    }
  ],
  width: 1080,
  height: 1920,
  fps: 30,
  durationPerPhoto: 3,
  outputFormat: "mp4"
};

/**
 * –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º pipeline
 */
async function testBasicVideoBuild(): Promise<boolean> {
  try {
    console.log("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ...");
    
    const workDir = "/tmp/media-test-1";
    await fs.mkdir(workDir, { recursive: true });
    
    const slidesPath = await buildSlidesVideo(testPlanInput, workDir);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
    const stats = await fs.stat(slidesPath);
    if (stats.size === 0) {
      throw new Error("Video file is empty");
    }
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ—à–µ–ª: —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${slidesPath} (${stats.size} bytes)`);
    
    // –û—á–∏—Å—Ç–∫–∞
    await fs.rm(workDir, { recursive: true, force: true });
    return true;
  } catch (e: any) {
    console.error(`‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: ${e.message}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 2: –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ resize
 */
async function testResizeStrategies(): Promise<boolean> {
  try {
    console.log("üß™ –¢–µ—Å—Ç 2: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ resize...");
    
    const processor = new MediaProcessor({
      targetWidth: 1080,
      targetHeight: 1920,
      fps: 30
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    const analyzer = new MediaAnalyzer();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const testFilePath = "/root/video_factory/prepared/photo1.jpg";
    try {
      const analysis = await analyzer.analyzeFileContent(testFilePath);
      console.log(`üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${analysis.type}, complexity: ${analysis.sceneComplexity}`);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (!analysis.type || !analysis.sceneComplexity) {
        throw new Error("Incomplete analysis");
      }
    } catch (e: any) {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª ${testFilePath} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç.`);
    }
    
    console.log("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ—à–µ–ª: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ resize –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    return true;
  } catch (e: any) {
    console.error(`‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: ${e.message}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback
 */
async function testErrorHandling(): Promise<boolean> {
  try {
    console.log("üß™ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫...");
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ fallback
    const errorPlanInput: PlanInput = {
      files: [
        {
          id: "nonexistent-file",
          src: "/tmp/nonexistent-file.jpg",
          type: "photo",
          durationSec: 2
        } as any,
        {
          id: "existing-file",
          src: "/root/video_factory/prepared/photo1.jpg", 
          type: "photo",
          durationSec: 2
        }
      ],
      width: 1080,
      height: 1920,
      fps: 30
    };
    
    const workDir = "/tmp/media-test-3";
    await fs.mkdir(workDir, { recursive: true });
    
    // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –Ω–µ —É–ø–∞—Å—Ç—å, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    try {
      const slidesPath = await buildSlidesVideo(errorPlanInput, workDir);
      
      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ—à–µ–ª: –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      
      // –û—á–∏—Å—Ç–∫–∞
      await fs.rm(workDir, { recursive: true, force: true });
      return true;
    } catch (e: any) {
      // –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Ç–æ —ç—Ç–æ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ 3: ${e.message}`);
      await fs.rm(workDir, { recursive: true, force: true });
      return true; // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    }
  } catch (e: any) {
    console.error(`‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: ${e.message}`);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç 4: –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
 */
async function testVideoQuality(): Promise<boolean> {
  try {
    console.log("üß™ –¢–µ—Å—Ç 4: –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ...");
    
    const workDir = "/tmp/media-test-4";
    await fs.mkdir(workDir, { recursive: true });
    
    const slidesPath = await buildSlidesVideo(testPlanInput,workDir);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º)
    const stats = await fs.stat(slidesPath);
    const minSizeBytes = 10000; // 10KB –º–∏–Ω–∏–º—É–º
    const maxSizeBytes = 50000000; // 50MB –º–∞–∫—Å–∏–º—É–º
    
    if (stats.size < minSizeBytes) {
      throw new Error(`Video too small: ${stats.size} bytes`);
    }
    if (stats.size > maxSizeBytes) {
      throw new Error(`Video too large: ${stats.size} bytes`);
    }
    
    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ—à–µ–ª: –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ (${stats.size} bytes)`);
    
    // –û—á–∏—Å—Ç–∫–∞
    await fs.rm(workDir, { recursive: true, force: true });
    return true;
  } catch (e: any) {
    console.error(`‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: ${e.message}`);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export async function runMediaPipelineTests(): Promise<{
  passed: number;
  total: number;
  results: Array<{ test: string; passed: boolean }>;
}> {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–µ–¥–∏–∞ pipeline (–≠—Ç–∞–ø 3)");
  console.log("=====================================");
  
  const tests = [
    { name: "–ë–∞–∑–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –≤–∏–¥–µ–æ", fn: testBasicVideoBuild },
    { name: "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ resize", fn: testResizeStrategies },
    { name: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", fn: testErrorHandling },
    { name: "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", fn: testVideoQuality }
  ];
  
  const results: Array<{ test: string; passed: boolean }> = [];
  let passed = 0;
  
  for (const { name, fn } of tests) {
    try {
      const result = await fn()
      results.push({ test: name, passed: result });
      if (result) passed++;
    } catch (e: any) {
      console.error(`‚ùå –¢–µ—Å—Ç "${name}" —É–ø–∞–ª: ${e.message}`);
      results.push({ test: name, passed: false });
    }
  }
  
  console.log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:");
  console.log("====================");
  
  for (const result of results) {
    const status = result.passed ? "‚úÖ" : "‚ùå";
    console.log(`${status} ${result.test}`);
  }
  
  console.log(`\nüéØ –ò—Ç–æ–≥–æ: ${passed}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ`);
  
  if (passed === tests.length) {
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –ú–µ–¥–∏–∞ pipeline –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
  } else {
    console.log("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.");
  }
  
  return {
    passed,
    total: tests.length,
    results
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default runMediaPipelineTests;
