import { McpServer, ServerEvent } from "@modelcontextprotocol/sdk/server";
import SubtitleRenderer from "../pipeline/SubtitleRenderer.js";
import MediaCreator from "../pipeline/MediaCreator.js";
import { PlanInput } from "../types/plan.js";

const mediaCreator = new MediaCreator();

// MCP сервер
const server = new McpServer(
  { name: "media-video-maker", version: "0.1.0" },
  { capabilities: {} }
);

// === TOOLS ===

// 1) Создание видео
server.tool("create_video", async (input: PlanInput) => {
  try {
    const id = mediaCreator.enqueue(input);
    return { id };
  } catch (err: any) {
    return { error: err.message || "Failed to enqueue job" };
  }
});

// 2) Проверка статуса
server.tool("check_status", async ({ videoId }: { videoId: string }) => {
  try {
    const status = mediaCreator.getStatus(videoId);
    return status || { error: "Not found" };
  } catch (err: any) {
    return { error: err.message || "Error getting status" };
  }
});

// 3) Рендер субтитров
server.tool(
  "render_subtitles",
  async ({ items, format }: { items: any[]; format: "srt" | "vtt" }) => {
    try {
      const file =
        format === "srt"
          ? await SubtitleRenderer.writeSrt(items, "/app/output/out.srt")
          : await SubtitleRenderer.writeVtt(items, "/app/output/out.vtt");
      return { file };
    } catch (err: any) {
      return { error: err.message || "Subtitle render failed" };
    }
  }
);

// 4) Обработка аудио (заглушка)
server.tool("process_audio", async ({ audioPath }: { audioPath: string }) => {
  return { ok: true, audioPath };
});

// === Запуск MCP сервера ===
server.start().catch((err: any) => {
  console.error("MCP server failed to start:", err);
  process.exit(1);
});
