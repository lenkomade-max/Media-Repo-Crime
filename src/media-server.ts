import express from "express";
import MediaCreator from "./pipeline/MediaCreator.js";
import { PlanInputSchema } from "./types/plan.js";
import { log } from "./logger.js";

const app = express();
const media = new MediaCreator();

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(express.json({ limit: "50mb" }));
app.set("trust proxy", true);

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/api/ping", (_req, res) => {
  res.json({ 
    status: "ok",
    version: "2.1-main",
    service: "media-video-maker",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    node: process.version,
    memory: {
      used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
      total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
      unit: "MB"
    },
    endpoints: {
      capabilities: "/api/capabilities",
      createVideo: "POST /api/create-video", 
      status: "GET /api/status/:id",
      jobs: "GET /api/jobs",
      health: "/health"
    },
    message: "üé¨ Media Video Maker API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
app.get("/api/capabilities", (_req, res) => {
  res.json({
    supportedFormats: {
      input: ["jpg", "jpeg", "png", "webp", "mp4", "mov", "avi", "mkv"],
      output: ["mp4", "mov"]
    },
    tts: {
      providers: ["kokoro", "openai", "none"],
      voices: ["alloy", "echo", "fable", "onyx", "nova", "shimmer"],
      models: ["gpt-4o-mini-tts", "tts-1", "tts-1-hd"],
      formats: ["mp3", "wav"]
    },
    effects: {
      zoom: { enabled: true, description: "–ü–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–µ–Ω—Ç—Ä–æ–º" },
      vhs: { enabled: true, description: "–í–∏–Ω—Ç–∞–∂–Ω—ã–π VHS —ç—Ñ—Ñ–µ–∫—Ç" },
      retro: { enabled: true, description: "–†–µ—Ç—Ä–æ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è" },
      custom: { enabled: true, description: "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ FFmpeg —Ñ–∏–ª—å—Ç—Ä—ã" }
    },
    limits: {
      maxFiles: 50,
      maxDurationMinutes: 30,
      maxFileSizeMB: 100,
      maxResolution: "4K"
    }
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ JSON-—Å—Ü–µ–Ω–∞—Ä–∏—è
app.post("/api/create-video", async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const plan = PlanInputSchema.parse(req.body);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    if (plan.files.length === 0) {
      return res.status(400).json({
        error: "–ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª —Ç—Ä–µ–±—É–µ—Ç—Å—è",
        code: "EMPTY_FILES"
      });
    }

    if (plan.files.length > 50) {
      return res.status(400).json({
        error: "–ú–∞–∫—Å–∏–º—É–º 50 —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        code: "TOO_MANY_FILES"
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const is4K = plan.width > 1920 || plan.height > 1920;
    if (is4K && plan.files.length > 10) {
      return res.status(400).json({
        error: "–î–ª—è 4K –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤",
        code: "4K_FILE_LIMIT"
      });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const id = media.enqueueJob(plan);
    log.info(`üìπ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ${id} —Å ${plan.files.length} —Ñ–∞–π–ª–∞–º–∏`);
    
    res.json({ 
      id,
      status: "queued",
      progress: 0,
      files: plan.files.length,
      duration: plan.durationPerPhoto * plan.files.length,
      resolution: `${plan.width}x${plan.height}`,
      createdAt: new Date().toISOString(),
      webhooks: {
        status: `http://localhost:4123/api/status/${id}`,
        sse: `http://localhost:5123/mcp/sse`
      }
    });
  } catch (e: any) {
    log.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${e?.message || e}`);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (e.name === "ZodError") {
      return res.status(400).json({
        error: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        code: "VALIDATION_ERROR",
        details: e.errors,
        timestamp: new Date().toISOString()
      });
    }
    
    res.status(400).json({ 
      error: e?.message || String(e),
      code: "INTERNAL_ERROR",
      timestamp: new Date().toISOString()
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
app.get("/api/status/:id", (req, res) => {
  try {
    const status = media.getJobStatus(req.params.id);
    if (!status) {
      return res.status(404).json({ 
        error: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        code: "NOT_FOUND",
        timestamp: new Date().toISOString()
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const response = {
      ...status,
      timestamp: new Date().toISOString(),
      elapsed: Date.now() - (status as any).createdAt || 0,
      eta: null as number | null
    };

    // –†–∞—Å—á—ë—Ç ETA –¥–ª—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
    if (status.state === "running" && status.progress > 0) {
      const estSecondsPerPercent = (response.elapsed / 1000) / status.progress;
      response.eta = Math.round(estSecondsPerPercent * (100 - status.progress));
    }

    res.json(response);
  } catch (e: any) {
    log.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ${req.params.id}: ${e?.message || e}`);
    res.status(500).json({ 
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      code: "INTERNAL_ERROR",
      timestamp: new Date().toISOString()
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get("/api/jobs", (req, res) => {
  try {
    const limit = Math.min(50, req.query.limit ? Number(req.query.limit) : 20);
    const offset = Number(req.query.offset) || 0;
    
    const result = media.getAllJobs(limit, offset);
    res.json({
      jobs: result.jobs,
      pagination: result.pagination,
      timestamp: new Date().toISOString()
    });
  } catch (e: any) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: ${e?.message || e}`);
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 
      code: "INTERNAL_ERROR",
      timestamp: new Date().toISOString()
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
app.delete("/api/jobs/:id", (req, res) => {
  try {
    const id = req.params.id;
    
    const cancelled = media.cancelJob(id);
    if (!cancelled) {
      return res.status(404).json({
        error: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        code: "NOT_FOUND",
        timestamp: new Date().toISOString()
      });
    }
    
    log.info(`üóëÔ∏è –ó–∞–¥–∞—á–∞ ${id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
    
    res.json({
      id,
      status: "cancelled", 
      message: "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
      timestamp: new Date().toISOString()
    });
  } catch (e: any) {
    log.error(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ ${req.params.id}: ${e?.message || e}`);
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      code: "INTERNAL_ERROR", 
      timestamp: new Date().toISOString()
    });
  }
});

// Health check –¥–ª—è Docker/K8s
app.get("/health", (_req, res) => {
  res.json({ 
    status: "healthy",
    timestamp: new Date().toISOString()
  });
});

const PORT = Number(process.env.MEDIA_PORT) || 4123;
const HOST = process.env.MEDIA_HOST || "0.0.0.0";

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = app.listen(PORT, HOST)
  .on("error", (err) => {
    log.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Media —Å–µ—Ä–≤–µ—Ä–∞: ${err}`);
    process.exit(1);
  })
  .on("listening", () => {
    const addr = server.address();
    if (addr && typeof addr === "object") {
      log.info(`üé¨ Media Video Maker –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${addr.address}:${addr.port}`);
      log.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ URL:");
      log.info(`- http://localhost:${addr.port}`);
      log.info(`- http://127.0.0.1:${addr.port}`);
      log.info(`- Health: http://${addr.address}:${addr.port}/health`);
    }
});

// Graceful shutdown
process.on("SIGTERM", () => {
  log.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è SIGTERM");
  server.close(() => {
    log.info("Media —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    process.exit(0);
  });
});

process.on("SIGINT", () => {
  log.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è SIGINT");
  server.close(() => {
    log.info("Media —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    process.exit(0);
  });
});

export default app;
