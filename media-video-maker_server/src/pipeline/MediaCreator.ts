import fs from "fs/promises";
import path from "path";
import fse from "fs-extra";
import * as uuid from "uuid";
import { runFFmpeg, checkVideoHasAudio } from "../utils/ffmpeg.js";
import { PlanInput, PlanInputSchema, JobStatus } from "../types/plan.js";
import { buildSlidesVideo } from "./ConcatPlanBuilder.js";
import { resolveVoiceTrack } from "../audio/TTSService.js";
import { transcribeWithWhisper } from "../transcribe/Whisper.js";
import { validateFileExists } from "../utils/fs.js";
import { buildAudioFilter } from "../audio/AudioMixer.js";
import { buildVideoOverlayFilter } from "./OverlayRenderer.js";
import { log } from "../logger.js";
import { FileDownloader } from "../utils/FileDownloader.js";

const uuidv4 = uuid.v4;

type QueueItem = { id: string; input: PlanInput };

export default class MediaCreator {
  private queue: QueueItem[] = [];
  private running = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
  private maxConcurrent = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  private statuses = new Map<string, JobStatus>();
  private completed = new Map<string, JobStatus>();
  private cancelled = new Set<string>();
  private fileDownloader = new FileDownloader();
  private downloadedFiles = new Map<string, string[]>();

  /** –∫–æ–ª–±—ç–∫ –¥–ª—è SSE */
  public onStatus?: (status: JobStatus) => void;

  enqueueJob(input: PlanInput) { return this.enqueue(input); }
  getStatus(id: string) { return this.statuses.get(id) || this.completed.get(id); }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @param script - —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –æ–∑–≤—É—á–∫–∏
   * @param hookText - —Ç–µ–∫—Å—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ–≤–µ—Ä–ª–µ—è (hook)
   * @param baitText - —Ç–µ–∫—Å—Ç –Ω–∏–∂–Ω–µ–≥–æ –æ–≤–µ—Ä–ª–µ—è (bait)
   * @param images - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
   * @param duration - –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   */
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è API
  getAllJobs(limit = 20, offset = 0) {
    const all = Array.from(this.statuses.values()).concat(Array.from(this.completed.values()));
    const sorted = all.sort((a, b) => (b as any).createdAt || 0 - (a as any).createdAt || 0);
    const total = sorted.length;
    return {
      jobs: sorted.slice(offset, offset + limit),
      pagination: { limit, offset, total, hasMore: offset + limit < total }
    };
  }

  cancelJob(id: string) {
    if (!this.statuses.has(id)) {
      return false;
    }
    this.cancelled.add(id);
    return true;
  }

  enqueue(input: PlanInput) {
    const parsed = PlanInputSchema.parse(input);
    const id = uuidv4();
    const status: JobStatus & { createdAt: number } = { 
      id, 
      state: "queued", 
      progress: 0,
      createdAt: Date.now()
    };
    this.statuses.set(id, status);
    this.onStatus?.(status);
    this.queue.push({ id, input: parsed });
    this.pump();
    return id;
  }

  private async pump() {
    if (this.running >= this.maxConcurrent) return;
    const item = this.queue.shift();
    if (!item) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (this.cancelled.has(item.id)) {
      this.cancelled.delete(item.id);
      this.statuses.delete(item.id);
      this.pump();
      return;
    }
    
    this.running++;
    try {
      let status: JobStatus & { createdAt: number } = { 
        id: item.id, 
        state: "running", 
        progress: 0, 
        message: "init",
        createdAt: Date.now()
      };
      this.statuses.set(item.id, status);
      this.onStatus?.(status);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (this.cancelled.has(item.id)) {
        this.cancelled.delete(item.id);
        status = { id: item.id, state: "error", error: "Job cancelled by user", createdAt: Date.now() };
        this.statuses.set(item.id, status);
        this.onStatus?.(status);
        return;
      }

      const out = await this.process(item.id, item.input);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
      if (this.cancelled.has(item.id)) {
        this.cancelled.delete(item.id);
        status = { id: item.id, state: "error", error: "Job cancelled during finalization", createdAt: Date.now() };
      } else {
        status = { id: item.id, state: "done", output: out.output, srt: out.srt, vtt: out.vtt, createdAt: Date.now() };
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∞—Ä—Ö–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        this.completed.set(item.id, status);
      }
      
      this.statuses.set(item.id, status);
      this.onStatus?.(status);
      this.statuses.delete(item.id); // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    } catch (e: any) {
      const status: JobStatus & { createdAt: number } = { 
        id: item.id, 
        state: "error", 
        error: e?.message || String(e),
        createdAt: Date.now()
      };
      this.statuses.set(item.id, status);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–æ—á–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∞—Ä—Ö–∏–≤, —á—Ç–æ–±—ã /api/status –Ω–µ –æ—Ç–¥–∞–≤–∞–ª NOT_FOUND
      this.completed.set(item.id, status);
      this.onStatus?.(status);
      this.statuses.delete(item.id);
    } finally {
      this.running--;
      this.pump(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
    }
  }

  private async process(id: string, input: PlanInput): Promise<{ output: string; srt?: string; vtt?: string }> {
    const workRoot = process.env.OUTPUT_DIR || "/app/output";
    const workDir = path.join(workRoot, `job_${id}`);
    await fse.ensureDir(workDir);

    // 0) –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ URL
    const processedInput = await this.downloadFiles(id, input);

    // 1) –°–±–æ—Ä–∫–∞ —Å–ª–∞–π–¥–æ–≤
    const slidesPath = await buildSlidesVideo(processedInput, workDir);

    // 2) –û–∑–≤—É—á–∫–∞
    let voicePath: string | null = null;
    try {
      voicePath = await resolveVoiceTrack(processedInput, workDir);
      if (voicePath) {
        log.info(`‚úÖ MediaCreator: TTS successful, audio file: ${voicePath}`);
      }
    } catch (error: any) {
      log.error(`‚ùå MediaCreator: TTS failed: ${error.message}`);
      // –í–∞–∂–Ω–æ: –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º TTS –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ TTS —Ç—Ä–µ–±—É–µ—Ç—Å—è
      if (processedInput.tts && processedInput.tts.provider !== "none" && processedInput.ttsText) {
        throw new Error(`TTS is required but failed: ${error.message}`);
      }
      voicePath = null;
    }

    // 3) –°—É–±—Ç–∏—Ç—Ä—ã —á–µ—Ä–µ–∑ Whisper (—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è)
    let srtPath: string | undefined;
    if (processedInput.transcribeAudio && voicePath) {
      try {
        srtPath = await transcribeWithWhisper(voicePath, workDir, "base");
        console.log(`üé§ Whisper: —Å–æ–∑–¥–∞–Ω ${srtPath}`);
      } catch (e: any) {
        console.error("–û—à–∏–±–∫–∞ Whisper:", e.message);
        throw new Error(`Whisper failed: ${e?.message || e}`);
      }
    }

    // 4) –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞
    const outPath = path.join(workRoot, `video_${id}.${processedInput.outputFormat}`);
    const args: string[] = ["-y", "-i", slidesPath];

    const hasMusic = !!processedInput.music;
    const hasVoice = !!voicePath;
    if (hasMusic) {
      const musicPath = path.resolve(processedInput.music!);
      if (!await validateFileExists(musicPath)) {
        throw new Error(`Music file not found: ${processedInput.music}`);
      }
      args.push("-i", musicPath);
    }
    if (hasVoice) args.push("-i", voicePath!);

    // –°—Ç—Ä–æ–∏–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä—ã (—ç—Ñ—Ñ–µ–∫—Ç—ã, –æ–≤–µ—Ä–ª–µ–∏, —Å—É–±—Ç–∏—Ç—Ä—ã)
    const { filter: videoFilter, finalLabel: videoFinalLabel, extraInputs } = await buildVideoOverlayFilter(
      processedInput,
      workDir,
      "[0:v]",
      srtPath,
      "ForceStyle=FontSize=32,PrimaryColour=&HFFFFFF,OutlineColour=&H000000,Outline=2,MarginV=300,Bold=1",
      hasMusic ? 1 : 0
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è –æ–≤–µ—Ä–ª–µ–µ–≤
    for (const extraInput of extraInputs) {
      const absInput = path.isAbsolute(extraInput)
        ? extraInput
        : path.resolve("/root/media-video-maker_project", extraInput);
      args.push("-i", absInput);
    }

    // –°—Ç—Ä–æ–∏–º –∞—É–¥–∏–æ —Ñ–∏–ª—å—Ç—Ä—ã
    const musicIndex = hasMusic ? 1 : -1;
    const voiceIndex = hasVoice ? (hasMusic ? 2 : 1) : -1;
    
    const { chain: audioChain, finalLabel: audioFinalLabel } = buildAudioFilter({
      hasMusic,
      hasVoice,
      musicVolumeDb: processedInput.musicVolumeDb ?? -6,
      ducking: processedInput.ducking,
      musicInLabel: hasMusic ? `[${musicIndex}:a]` : "",
      voiceInLabel: hasVoice ? `[${voiceIndex}:a]` : "",
    });
    log.info(`Audio debug: audioChain="${audioChain}", audioFinalLabel="${audioFinalLabel}"`);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∏–ª—å—Ç—Ä—ã
    const allFilters = [];
    if (videoFilter) allFilters.push(videoFilter);
    if (audioChain) allFilters.push(audioChain);
    
    if (allFilters.length > 0) {
      args.push("-filter_complex", allFilters.join(";"));
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –≤–∏–¥–µ–æ
    if (videoFinalLabel) {
      args.push("-map", videoFinalLabel);
    } else {
      args.push("-map", "0:v:0");
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –∞—É–¥–∏–æ
    log.info(`Audio mapping: hasMusic=${hasMusic}, hasVoice=${hasVoice}, audioFinalLabel="${audioFinalLabel}"`);
    if (audioFinalLabel) {
      // –î–ª—è –ø—Ä—è–º–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä [1:a])
      args.push("-map", audioFinalLabel);
      args.push("-c:a", "aac", "-b:a", "192k");
    } else if (hasMusic) {
      args.push("-map", `${musicIndex}:a:0`, "-c:a", "aac", "-b:a", "192k");
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –Ω–∏–∑–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const isLowRes = ((processedInput.width ?? 0) <= 854) || ((processedInput.height ?? 0) <= 854);
    args.push("-c:v", "libx264", "-pix_fmt", "yuv420p", "-r", String(processedInput.fps));
    args.push("-preset", isLowRes ? "ultrafast" : "veryfast");
    args.push("-crf", isLowRes ? "28" : "26");
    
    args.push(outPath);

    await runFFmpeg(args, workDir);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ (–∑–∞–¥–∞—á–∞ #5 –∏–∑ –ø–ª–∞–Ω–∞)
    const audioCheck = await checkVideoHasAudio(outPath);
    
    // –ï—Å–ª–∏ TTS –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –Ω–æ –∞—É–¥–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä
    if (voicePath && !audioCheck.hasAudio) {
      log.error(`‚ùå MediaCreator: TTS was generated but output video has no audio stream!`);
      log.error(`üìù Request dump for retry: ${JSON.stringify({ 
        id, 
        tts: processedInput.tts, 
        ttsText: processedInput.ttsText,
        voiceFile: voicePath,
        hasMusic,
        hasVoice 
      }, null, 2)}`);
      
      // –ü–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä
      throw new Error(`Video generated without audio despite TTS success. Check FFmpeg audio mapping.`);
    } else if (audioCheck.hasAudio && voicePath) {
      log.info(`‚úÖ MediaCreator: Audio validation passed - ${audioCheck.audioStreams} stream(s): ${audioCheck.details}`);
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    await this.cleanupDownloadedFiles(id);

    return { output: outPath, srt: srtPath };
  }

  private async downloadFiles(jobId: string, input: PlanInput): Promise<PlanInput> {
    log.info(`üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è job ${jobId}`);
    
    const processedInput = { ...input };
    const downloadedFiles: string[] = [];
    
    try {
      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ files
      for (const file of processedInput.files) {
        if (file.download && await this.fileDownloader.isUrl(file.src)) {
          log.info(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${file.src}`);
          
          const result = await this.fileDownloader.ensureFileExists(file.src);
          file.src = result;
          downloadedFiles.push(result);
          
          log.info(`‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${result}`);
        }
      }
      
      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
      if (processedInput.music && processedInput.musicDownload && await this.fileDownloader.isUrl(processedInput.music)) {
        log.info(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏: ${processedInput.music}`);
        
        const result = await this.fileDownloader.ensureFileExists(processedInput.music);
        processedInput.music = result;
        downloadedFiles.push(result);
        
        log.info(`‚úÖ –ú—É–∑—ã–∫–∞ —Å–∫–∞—á–∞–Ω–∞: ${result}`);
      }
      
      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ TTS —Ñ–∞–π–ª–∞
      if (processedInput.voiceFile && await this.fileDownloader.isUrl(processedInput.voiceFile)) {
        log.info(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ TTS —Ñ–∞–π–ª–∞: ${processedInput.voiceFile}`);
        
        const result = await this.fileDownloader.ensureFileExists(processedInput.voiceFile);
        processedInput.voiceFile = result;
        downloadedFiles.push(result);
        
        log.info(`‚úÖ TTS —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: ${result}`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
      this.downloadedFiles.set(jobId, downloadedFiles);
      
      log.info(`‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∞–π–ª–æ–≤: ${downloadedFiles.length}`);
      return processedInput;
      
    } catch (error: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${error.message}`);
      
      // –û—á–∏—â–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await this.cleanupDownloadedFiles(jobId);
      throw error;
    }
  }
  
  private async cleanupDownloadedFiles(jobId: string): Promise<void> {
    const files = this.downloadedFiles.get(jobId);
    if (!files) return;
    
    try {
      log.info(`üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è job ${jobId}`);
      
      for (const file of files) {
        try {
          await fse.remove(file);
          log.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${file}`);
        } catch (error) {
          log.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ${file}: ${error}`);
        }
      }
      
      this.downloadedFiles.delete(jobId);
      log.info(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      
    } catch (error: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    }
  }
}
