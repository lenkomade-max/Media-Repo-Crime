import { FileDownloader } from './FileDownloader.js';
import { log } from '../logger.js';

export interface WebhookPayload {
  jobId: string;
  status: 'completed' | 'error' | 'cancelled';
  videoUrl?: string;
  downloadUrl?: string;
  error?: string;
  cleanupCompleted: boolean;
  timestamp: string;
}

export class CleanupService {
  private fileDownloader: FileDownloader;
  private webhookUrl?: string;

  constructor(webhookUrl?: string) {
    this.fileDownloader = new FileDownloader();
    this.webhookUrl = webhookUrl;
  }

  async cleanupAfterVideoCreation(jobId: string, videoPath: string): Promise<void> {
    try {
      log.info(`üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è job ${jobId}`);
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      await this.fileDownloader.cleanupDownloadedFiles(jobId);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.notifyVideoReady(jobId, videoPath);
      
      log.info(`‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è job ${jobId}`);
      
    } catch (error: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –¥–ª—è job ${jobId}: ${error.message}`);
      throw error;
    }
  }

  async cleanupOnError(jobId: string, error: string): Promise<void> {
    try {
      log.info(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è job ${jobId}`);
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      await this.fileDownloader.cleanupDownloadedFiles(jobId);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      await this.notifyError(jobId, error);
      
      log.info(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è job ${jobId}`);
      
    } catch (cleanupError: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è job ${jobId}: ${cleanupError.message}`);
    }
  }

  async schedulePeriodicCleanup(): Promise<void> {
    try {
      log.info(`üßπ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏`);
      
      // –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
      await this.fileDownloader.cleanupOldFiles(24);
      
      log.info(`‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      
    } catch (error: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    }
  }

  async notifyVideoReady(jobId: string, videoPath: string): Promise<void> {
    if (!this.webhookUrl) {
      log.info(`üì§ Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
      return;
    }

    try {
      const payload: WebhookPayload = {
        jobId,
        status: 'completed',
        videoUrl: `http://178.156.142.35:8080/${videoPath.split('/').pop()}`,
        downloadUrl: `http://178.156.142.35:8080/${videoPath.split('/').pop()}`,
        cleanupCompleted: true,
        timestamp: new Date().toISOString()
      };

      const response = await fetch(this.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'MediaVideoMaker/1.0'
        },
        body: JSON.stringify(payload),
        // timeout: 10000
      });

      if (response.ok) {
        log.info(`üì§ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è job ${jobId}`);
      } else {
        log.warn(`‚ö†Ô∏è Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: HTTP ${response.status}`);
      }

    } catch (error: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –¥–ª—è job ${jobId}: ${error.message}`);
    }
  }

  async notifyError(jobId: string, error: string): Promise<void> {
    if (!this.webhookUrl) {
      log.info(`üì§ Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ`);
      return;
    }

    try {
      const payload: WebhookPayload = {
        jobId,
        status: 'error',
        error,
        cleanupCompleted: true,
        timestamp: new Date().toISOString()
      };

      const response = await fetch(this.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'MediaVideoMaker/1.0'
        },
        body: JSON.stringify(payload),
        // timeout: 10000
      });

      if (response.ok) {
        log.info(`üì§ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è job ${jobId}`);
      } else {
        log.warn(`‚ö†Ô∏è Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: HTTP ${response.status}`);
      }

    } catch (webhookError: any) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –æ–± –æ—à–∏–±–∫–µ –¥–ª—è job ${jobId}: ${webhookError.message}`);
    }
  }

  setWebhookUrl(url: string): void {
    this.webhookUrl = url;
    log.info(`üì§ Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}`);
  }
}
