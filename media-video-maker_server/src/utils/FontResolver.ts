import fs from "fs/promises";
import { log } from "../logger.js";

/**
 * –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —à—Ä–∏—Ñ—Ç–∞–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
 */
const FONT_CANDIDATES = [
  // Linux (Debian/Ubuntu) - –æ—Å–Ω–æ–≤–Ω–æ–π
  "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
  "/usr/share/fonts/dejavu/DejaVuSans.ttf",
  "/usr/share/fonts/TTF/DejaVuSans.ttf",
  
  // Linux - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
  "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
  "/usr/share/fonts/liberation/LiberationSans-Regular.ttf",
  "/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf",
  "/usr/share/fonts/noto/NotoSans-Regular.ttf",
  
  // macOS
  "/System/Library/Fonts/Helvetica.ttc",
  "/System/Library/Fonts/Arial.ttf",
  "/Library/Fonts/Arial.ttf",
  
  // Windows (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ WSL)
  "/mnt/c/Windows/Fonts/arial.ttf",
  "/mnt/c/Windows/Fonts/calibri.ttf",
  
  // Fallback –¥–ª—è –¥–æ–∫–µ—Ä–∞
  "/app/fonts/DejaVuSans.ttf",
];

/**
 * –ö—ç—à –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
 */
let cachedFontPath: string | null = null;

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 */
export async function findAvailableFont(): Promise<string> {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (cachedFontPath) {
    return cachedFontPath;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envFont = process.env.FONT_FILE;
  if (envFont) {
    try {
      await fs.access(envFont);
      log.info(`üî§ Font from ENV: ${envFont}`);
      cachedFontPath = envFont;
      return envFont;
    } catch {
      log.warn(`üî§ Font from ENV not found: ${envFont}`);
    }
  }
  
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  for (const fontPath of FONT_CANDIDATES) {
    try {
      await fs.access(fontPath);
      log.info(`üî§ Font found: ${fontPath}`);
      cachedFontPath = fontPath;
      return fontPath;
    } catch {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    }
  }
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - —à—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
  log.error(`üî§ No fonts found! Checked ${FONT_CANDIDATES.length} candidates`);
  log.error(`üî§ Install fonts: apt-get install fonts-dejavu-core (Linux) or set FONT_FILE env variable`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –∫–∞–∫ fallback (–ø—É—Å—Ç—å FFmpeg —Ä–µ—à–∞–µ—Ç)
  const fallbackFont = FONT_CANDIDATES[0];
  log.warn(`üî§ Using fallback font: ${fallbackFont}`);
  return fallbackFont;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ
 */
export async function getFontInfo(): Promise<{ path: string; exists: boolean; size?: number }> {
  const fontPath = await findAvailableFont();
  
  try {
    const stats = await fs.stat(fontPath);
    return {
      path: fontPath,
      exists: true,
      size: stats.size
    };
  } catch {
    return {
      path: fontPath,
      exists: false
    };
  }
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à —à—Ä–∏—Ñ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export function resetFontCache(): void {
  cachedFontPath = null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —à—Ä–∏—Ñ—Ç–æ–≤ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
 */
export async function diagnoseAllFonts(): Promise<{ path: string; available: boolean }[]> {
  const results: { path: string; available: boolean }[] = [];
  
  for (const fontPath of FONT_CANDIDATES) {
    try {
      await fs.access(fontPath);
      results.push({ path: fontPath, available: true });
    } catch {
      results.push({ path: fontPath, available: false });
    }
  }
  
  return results;
}
