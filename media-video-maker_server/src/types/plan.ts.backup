import { z } from "zod";

/** Фото/видео-элемент таймлайна */
export const MediaFileSchema = z.object({
  id: z.string(),
  src: z.string(),
  type: z.enum(["photo", "video"]).default("photo"),
  durationSec: z.number().optional(),
  trimStart: z.number().optional(),
  trimEnd: z.number().optional(),
  group: z.string().optional(),
});
export type MediaFile = z.infer<typeof MediaFileSchema>;

/** Опции дукинга музыки под голос */
export const DuckingSchema = z.object({
  enabled: z.boolean().default(true),
  musicDuckDb: z.number().default(8),
  threshold: z.number().default(0.05),
  ratio: z.number().default(8),
  attack: z.number().default(5),
  release: z.number().default(250),
});
export type Ducking = z.infer<typeof DuckingSchema>;

/** Провайдер TTS или внешний файл озвучки */
export const TTSOptionsSchema = z.object({
  provider: z.enum(["kokoro", "openai", "none"]).default("none"),
  endpoint: z.string().optional(),
  voice: z.string().default("alloy"),
  model: z.string().default("gpt-4o-mini-tts"),
  format: z.enum(["mp3", "wav"]).default("mp3"),
  speed: z.number().default(1.0),
});
export type TTSOptions = z.infer<typeof TTSOptionsSchema>;

/** Стили субтитров (ASS/libass force_style) */
export const SubtitleStyleSchema = z.object({
  font: z.string().optional(),
  size: z.number().optional(),
  color: z.string().optional(),
  background: z.string().optional(),
  outline: z.object({
    enabled: z.boolean().default(true),
    width: z.number().default(2),
    color: z.string().default("#000000"),
  }).optional(),
  alignment: z.enum(["top", "bottom"]).optional(),
  marginV: z.number().optional(),
});
export type SubtitleStyle = z.infer<typeof SubtitleStyleSchema>;

/** Overlay элементы */
const PositionSchema = z.object({
  x: z.number(),
  y: z.number(),
  anchor: z
    .enum([
      "top-left",
      "top",
      "top-right",
      "left",
      "center",
      "right",
      "bottom-left",
      "bottom",
      "bottom-right",
    ])
    .optional(),
});

const TextOverlayStyleSchema = z.object({
  font: z.string().optional(),
  size: z.number().optional(),
  color: z.string().optional(),
  background: z.string().optional(),
  outlineWidth: z.number().optional(),
  
  // Расширенные стили v2
  fontWeight: z.enum(["normal", "bold", "black"]).optional(),
  textTransform: z.enum(["none", "uppercase", "lowercase"]).optional(),
  
  // Градиентные цвета
  colors: z.object({
    primary: z.string().optional(),
    highlight: z.string().optional(),
    gradient: z.array(z.string()).optional(),
  }).optional(),
  
  // Улучшенный фон
  backgroundStyle: z.object({
    color: z.string().optional(),
    borderRadius: z.number().optional(),
    padding: z.number().optional(),
    shadow: z.boolean().optional(),
  }).optional(),
});

const RectShapeSchema = z.object({
  w: z.number().optional(),
  h: z.number().optional(),
  color: z.string().optional(),
  thickness: z.number().optional(),
  fillOpacity: z.number().min(0).max(1).optional(),
});

const CircleShapeSchema = z.object({
  radius: z.number().optional(),
  color: z.string().optional(),
  thickness: z.number().optional(),
  fillOpacity: z.number().min(0).max(1).optional(),
});

const ArrowShapeSchema = z.object({
  x1: z.number(),
  y1: z.number(),
  x2: z.number(),
  y2: z.number(),
  color: z.string().optional(),
  thickness: z.number().optional(),
  headSize: z.number().optional(),
});

// Комбинированный элемент круг+стрелка
const CircleArrowShapeSchema = z.object({
  // Позиция центра
  x: z.number(),
  y: z.number(),
  
  // Параметры круга
  circle: z.object({
    radius: z.number().optional(),
    color: z.string().optional(),
    thickness: z.number().optional(),
    fillOpacity: z.number().min(0).max(1).optional(),
  }),
  
  // Параметры стрелки
  arrow: z.object({
    length: z.number().optional(),
    angle: z.number().optional(), // градусы
    color: z.string().optional(),
    thickness: z.number().optional(),
    headSize: z.number().optional(),
  }),
  
  // Анимация
  animation: z.object({
    pulse: z.object({
      enabled: z.boolean().optional(),
      scale: z.number().optional(), // ±15% = 0.15
      frequency: z.number().optional(), // секунды
    }).optional(),
    
    arrowWobble: z.object({
      enabled: z.boolean().optional(),
      angle: z.number().optional(), // ±5 градусов
      frequency: z.number().optional(),
    }).optional(),
    
    highlight: z.object({
      enabled: z.boolean().optional(),
      brightness: z.number().optional(), // ±30% = 0.3
      frequency: z.number().optional(),
    }).optional(),
  }).optional(),
});

export const OverlayItemSchema = z.object({
  target: z.enum(["top", "bottom", "custom", "rect", "circle", "arrow", "circle-arrow"]),
  text: z.string().optional(),
  startSec: z.number().default(0),
  endSec: z.number().default(0),
  position: PositionSchema.optional(),
  style: TextOverlayStyleSchema.optional(),
  shape: z.union([RectShapeSchema, CircleShapeSchema, ArrowShapeSchema, CircleArrowShapeSchema]).optional(),
  
  // Анимация текста
  animation: z.object({
    type: z.enum(["fade", "typewriter", "slide", "scale"]).optional(),
    duration: z.number().optional(),
    wordsPerSecond: z.number().optional(),
    highlightWords: z.array(z.string()).optional(),
  }).optional(),
});
export type OverlayItem = z.infer<typeof OverlayItemSchema>;

/** Video Overlay элементы */
const VideoOverlaySchema = z.object({
  type: z.literal("effect"),
  file: z.string(),
  blendMode: z.enum([
    "overlay",
    "screen", 
    "multiply",
    "softlight",
    "hardlight",
    "lighten",
    "darken",
    "difference",
    "exclusion",
    "color-dodge",
    "color-burn"
  ]).default("overlay"),
  start: z.number().default(0),
  end: z.number(),
  opacity: z.number().min(0).max(1).default(1.0),
  scale: z.number().positive().default(1.0),
  position: z.object({
    x: z.number().default(0),
    y: z.number().default(0),
  }).optional(),
});
export type VideoOverlay = z.infer<typeof VideoOverlaySchema>;

/** Timeline структура с base видео и overlays */
const TimelineSchema = z.object({
  base: z.array(z.object({
    type: z.enum(["video", "photo"]),
    file: z.string(),
  })),
  overlays: z.array(VideoOverlaySchema).optional(),
});
export type Timeline = z.infer<typeof TimelineSchema>;

/** Эффекты Этап 3 */
const ZoomEffectSchema = z.object({
  kind: z.literal("zoom"),
  startSec: z.number().default(0),
  endSec: z.number().default(0),
  params: z.object({
    startScale: z.number().default(1.0),
    endScale: z.number().default(1.2),
    cx: z.number().default(0.5), // 0..1 (нормированные координаты центра)
    cy: z.number().default(0.5),
  }),
});
const VhsEffectSchema = z.object({
  kind: z.literal("vhs"),
  startSec: z.number().default(0),
  endSec: z.number().default(0),
  params: z.object({
    noise: z.number().default(20), // 5..40
    chroma: z.number().default(2), // 0..5
    contrast: z.number().default(1.05),
    saturation: z.number().default(1.15),
  }).optional(),
});

// Улучшенный VHS эффект v2
const AdvancedVhsEffectSchema = z.object({
  kind: z.literal("vhs-advanced"),
  startSec: z.number().default(0),
  endSec: z.number().default(0),
  params: z.object({
    // Базовые параметры
    noise: z.number().default(20),
    chroma: z.number().default(2.2),
    
    // Хроматические аберрации
    chromatic: z.object({
      enabled: z.boolean().default(true),
      strength: z.number().default(3),
      redShift: z.number().default(1),
      blueShift: z.number().default(-1),
    }).optional(),
    
    // Горизонтальные искажения
    distortion: z.object({
      enabled: z.boolean().default(true),
      frequency: z.number().default(0.5),
      amplitude: z.number().default(2),
    }).optional(),
    
    // Цветовая коррекция
    color: z.object({
      contrast: z.number().default(1.2),
      saturation: z.number().default(1.3),
      brightness: z.number().default(1.0),
    }).optional(),
  }).optional(),
});
const RetroEffectSchema = z.object({
  kind: z.literal("retro"),
  startSec: z.number().default(0),
  endSec: z.number().default(0),
  params: z.object({
    vignette: z.number().default(Math.PI / 5),
    grain: z.number().default(5),
    saturation: z.number().default(0.95),
    contrast: z.number().default(1.05),
    gamma: z.number().default(0.98),
  }).optional(),
});
const CustomEffectSchema = z.object({
  kind: z.literal("custom"),
  startSec: z.number().default(0),
  endSec: z.number().default(0),
  filter: z.string(), // произвольная ffmpeg-цепочка с enable='between(t,...)'
});

export const EffectItemSchema = z.discriminatedUnion("kind", [
  ZoomEffectSchema,
  VhsEffectSchema,
  AdvancedVhsEffectSchema,
  RetroEffectSchema,
  CustomEffectSchema,
]);
export type EffectItem = z.infer<typeof EffectItemSchema>;

export const PlanInputSchema = z.object({
  files: z.array(MediaFileSchema).nonempty(),
  music: z.string().optional(),

  width: z.number().default(1080),
  height: z.number().default(1920),
  fps: z.number().default(30),
  durationPerPhoto: z.number().default(2.0),
  outputFormat: z.enum(["mp4", "mov"]).default("mp4"),

  voiceFile: z.string().optional(),
  tts: TTSOptionsSchema.optional(),
  ttsText: z.string().optional(),

  transcribeAudio: z.boolean().default(false),
  burnSubtitles: z.boolean().default(false),

  musicVolumeDb: z.number().default(-6),
  ducking: DuckingSchema.default({
    enabled: true,
    musicDuckDb: 8,
    threshold: 0.05,
    ratio: 8,
    attack: 5,
    release: 250,
  }),

  overlays: z.array(OverlayItemSchema).optional(),
  subtitleStyle: SubtitleStyleSchema.optional(),

  groups: z.array(z.object({ group: z.string(), durationSec: z.number() })).optional(),
  effects: z.array(EffectItemSchema).optional(),
  
  // Новая структура timeline с video overlays
  timeline: TimelineSchema.optional(),
  videoOverlays: z.array(VideoOverlaySchema).optional(),
});
export type PlanInput = z.infer<typeof PlanInputSchema>;

export type JobStatus =
  | { id: string; state: "queued"; progress: number }
  | { id: string; state: "running"; progress: number; message?: string }
  | { id: string; state: "done"; output: string; srt?: string; vtt?: string }
  | { id: string; state: "error"; error: string };

/** Совместимость со старым импортом `Overlay` */
export type Overlay = OverlayItem;
