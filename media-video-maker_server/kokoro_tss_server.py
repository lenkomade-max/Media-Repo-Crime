#!/usr/bin/env python3
"""
Kokoro TTS HTTP Server - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç HTTP API –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
"""

from flask import Flask, request, jsonify, send_file
import tempfile
import os
import numpy as np
import wave
from kokoro_tts import Kokoro

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kokoro TTS
try:
    print("‚úÖ Kokoro TTS –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    model_path = "/root/media-video-maker-test/kokoro-v1.0.onnx"
    voices_path = "/root/media-video-maker/media-video-maker_server/voices-v1.0.bin"
    
    print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_path}")
    print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {voices_path}")
    
    kokoro_manager = Kokoro(model_path=model_path, voices_path=voices_path)
    kokoro_ready = True
    print("‚úÖ Kokoro TTS –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Kokoro TTS: {e}")
    kokoro_ready = False
    kokoro_manager = None

def audio_samples_to_wav_file(samples, sample_rate, filepath):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç numpy samples –≤ WAV —Ñ–∞–π–ª"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 16-–±–∏—Ç
        samples_int16 = (samples * 32767).astype(np.int16)
        
        with wave.open(filepath, 'wb') as wav_file:
            wav_file.setnchannels(1)  # –º–æ–Ω–æ
            wav_file.setsampwidth(2)   # 16-–±–∏—Ç = 2 –±–∞–π—Ç–∞
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(samples_int16.tobytes())
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV: {e}")
        return False

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({"status": "ok", "provider": "kokoro-tts", "ready": kokoro_ready})

@app.route('/voices', methods=['GET'])
def get_voices():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
    if not kokoro_ready:
        return jsonify({"error": "Kokoro TTS –Ω–µ –≥–æ—Ç–æ–≤"}), 500
    
    try:
        voices = kokoro_manager.get_voices()
        return jsonify({"voices": voices})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}"}), 500

@app.route('/languages', methods=['GET'])
def get_languages():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
    if not kokoro_ready:
        return jsonify({"error": "Kokoro TTS –Ω–µ –≥–æ—Ç–æ–≤"}), 500
    
    try:
        languages = kokoro_manager.get_languages()
        return jsonify({"languages": languages})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: {e}"}), 500

@app.route('/v1/tts', methods=['POST'])
def synthesize_speech():
    """–û—Å–Ω–æ–≤–Ω–æ–π TTS endpoint"""
    if not kokoro_ready:
        return jsonify({"error": "Kokoro TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 500
    
    try:
        data = request.get_json()
        text = data.get('text', '')
        voice = data.get('voice', 'af_alloy')  # –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if not text.strip():
            return jsonify({"error": "–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ø—É—Å—Ç"}), 400
        
        print(f"üé§ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: '{text}' –≥–æ–ª–æ—Å '{voice}'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑
        audio_samples, sample_rate = kokoro_manager.create(text, voice=voice)
        
        print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {len(audio_samples)} samples, {sample_rate}Hz")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
            temp_path = temp_file.name
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        if audio_samples_to_wav_file(audio_samples, sample_rate, temp_path):
            file_size = os.path.getsize(temp_path)
            print(f"üìÅ WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_size} –±–∞–π—Ç")
            
            return send_file(
                temp_path, 
                as_attachment=True, 
                download_name='speech.wav',
                mimetype='audio/wav'
            )
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ TTS: {e}"}), 500

@app.route('/test', methods=['POST'])
def test_synthesis():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞"""
    test_data = {
        "text": "Hello world, this is a test",
        "voice": "af_alloy"
    }
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    return synthesize_speech()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Kokoro TTS Server –Ω–∞ –ø–æ—Ä—Ç—É 11402...")
    app.run(host='0.0.0.0', port=11402, debug=False)