#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç Kokoro TTS
"""

from kokoro_tts import Kokoro
import os

def main():
    model_path = "/root/media-video-maker-test/kokoro-v1.0.onnx"
    voices_path = "/root/media-video-maker/media-video-maker_server/voices-v1.0.bin"

    try:
        print("üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kokoro...")
        kokoro = Kokoro(model_path=model_path, voices_path=voices_path)
        
        print("‚úÖ Kokoro –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        print("\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
        methods = [m for m in dir(kokoro) if not m.startswith("_")]
        for method in methods:
            print(f"  - {method}")
        
        print("\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
        try:
            voices = kokoro.get_voices()
            print(f"–ì–æ–ª–æ—Å–∞: {voices}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ get_voices: {e}")
        
        print("\nüîç –Ø–∑—ã–∫–∏:")
        try:
            languages = kokoro.get_languages()
            print(f"–Ø–∑—ã–∫–∏: {languages}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ get_languages: {e}")
        
        print("\nüß™ –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏...")
        try:
            audio = kokoro.create("Hello world test", voice="en-us", language="en")
            print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω! –¢–∏–ø: {type(audio)}, —Ä–∞–∑–º–µ—Ä: {len(audio) if audio else 0}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if audio:
                with open("/tmp/test_kokoro_output.wav", "wb") as f:
                    f.write(audio)
                print("‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ /tmp/test_kokoro_output.wav")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            import traceback
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
