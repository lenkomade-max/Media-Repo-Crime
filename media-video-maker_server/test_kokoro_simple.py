#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Kokoro TTS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

from flask import Flask, request, jsonify
import tempfile
import os
from kokoro_tts import Kokoro

print("üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kokoro TTS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

try:
    kokoro = Kokoro()
    print("‚úÖ Kokoro TTS —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    test_text = "Hello world, this is a test"
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑: '{test_text}'")
    
    audio_data = kokoro.convert_text_to_audio(test_text)
    print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω! –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {len(audio_data)} –±–∞–π—Ç")
    
    app = Flask(__name__)
    
    @app.route('/health', methods=['GET'])
    def health():
        return jsonify({
            "status": "ok", 
            "provider": "kokoro-tts", 
            "ready": True,
            "test_passed": True
        })
    
    @app.route('/test', methods=['POST'])
    def test_tts():
        try:
            data = request.json or {}
            text = data.get('text', 'Hello world test')
            
            audio_data = kokoro.convert_text_to_audio(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_file:
                tmp_file.write(audio_data)
                tmp_path = tmp_file.name
            
            return jsonify({
                "status": "success",
                "audio_size": len(audio_data),
                "temp_file": tmp_path,
                "message": f"Successfully synthesized: '{text}'"
            })
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    if __name__ == '__main__':
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 11402")
        app.run(host='0.0.0.0', port=11402, debug=False)

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    exit(1)
