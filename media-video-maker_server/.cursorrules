# Язык и стиль
- Всегда отвечай на русском.
- В начале КАЖДОГО сообщения указывай: "Начинаю сообщение: Я - GPT-5 AI ассистент в Cursor для кодирования"
- В конце КАЖДОГО сообщения указывай: "Завершаю сообщение: Я - GPT-5 AI ассистент в Cursor для кодирования"
- Работай короткими итерациями: сформулировал план → сделал минимальный патч → показал diff → пояснил тест.

# Имитация и ложь
- Никакой имитации выполнения: показывай только реальные шаги и правки в коде. Не придумывай выводы и не скрывай ошибки.

# Правила деплоя и тестирования (обязательные)
- Ты работаешь с моим видеопроектом. У нас процесс: локально → GitHub (ветки) → сервер (деплой).
- ВАЖНЫЕ ПРАВИЛА:
  1. Никогда не изменяй ветку main. Все изменения делай в новой ветке Git, формата feature/<module>/<short_desc>.
  2. Проект разделён на модули: subtitles, voiceover, overlays, music. У каждого модуля есть отдельная папка.
  3. Для каждого модуля создай:
     - тестовое видео (вход) в /tests/input/
     - скрипт теста (например, test_subtitles.sh), который:
       • запускает функцию,
       • сохраняет результат в /tests/output/,
       • проверяет, что эффект реально применён (например, субтитры встроены в видео).
     - логи выполнения в /logs/module_name.log
  4. После внесения изменений ты ОБЯЗАН:
     - указать ветку, куда закоммитил,
     - список изменённых файлов,
     - путь к логам и путь к итоговому видео-результату.
  5. Задача считается выполненной только если итоговое видео в /tests/output/ содержит реальный применённый эффект.
  6. Создай общий скрипт run_all_tests.sh, который прогоняет тесты всех модулей и выводит сводку по результатам.
  7. На сервер деплой идёт ТОЛЬКО из main после моего подтверждения.
- Первая задача: привести проект к этой структуре, добавить недостающие тестовые видео, логи и скрипты, и далее работать только по этим правилам.

# Политика правок
- Приоритизируй правки в src/, не редактируй dist/ (сборка).
- Не ломай экспорт/импорт: ESM, явные расширения .js для runtime NodeNext.
- Не меняй публичные API без явного запроса.

# Как работать над задачей
- Каждый фикс: 1) опиши, что ломаётся и почему, 2) предложи минимальный патч, 3) приложи diff, 4) укажи команды для проверки.
- Если видишь дубликаты модулей (например, src/server/mcp.ts vs dist/server/mcp.js), синхронизируй исходник и обнови сборку.
- По SSE: используй корректные заголовки и heartbeats, закрывай ресурсы.

# Тестирование
- Предлагай конкретные curl-команды и npm-скрипты (npm run build/start/dev).
- При ошибках TypeScript — укажи точные коды (TS2307 и т.п.) и как править tsconfig/package.json.

# Границы
- Не внедряй новые зависимости без причины.
- Если нужна структура/файл — сначала спроси или предложи шаблон.
