#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç Kokoro TTS —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ WAV
"""

from kokoro_tts import Kokoro
import numpy as np
import wave
import tempfile
import os

def audio_samples_to_wav(samples, sample_rate, filename):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç numpy array –≤ WAV —Ñ–∞–π–ª"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 16-–±–∏—Ç
        samples_int16 = (samples * 32767).astype(np.int16)
        
        with wave.open(filename, 'wb') as wav_file:
            wav_file.setnchannels(1)  # –º–æ–Ω–æ
            wav_file.setsampwidth(2)   # 16-–±–∏—Ç = 2 –±–∞–π—Ç–∞
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(samples_int16.tobytes())
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV: {e}")
        return False

def main():
    model_path = "/root/media-video-maker-test/kokoro-v1.0.onnx"
    voices_path = "/root/media-video-maker/media-video-maker_server/voices-v1.0.bin"

    try:
        print("üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kokoro TTS...")
        kokoro = Kokoro(model_path=model_path, voices_path=voices_path)
        print("‚úÖ Kokoro –≥–æ—Ç–æ–≤!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        test_cases = [
            ("Hello world, testing English voice", "af_alloy"),
            ("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä, —Ç–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞", "if_sara"),  # —Ä—É—Å—Å–∫–∏–π –∂–µ–Ω—Å–∫–∏–π
            ("Bonjour le monde", "ef_dora"),  # —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–µ–Ω—Å–∫–∏–π
        ]
        
        for text, voice in test_cases:
            print(f"\nüß™ –¢–µ—Å—Ç: '{text}' —Å –≥–æ–ª–æ—Å–æ–º '{voice}'")
            
            try:
                # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
                audio_result = kokoro.create(text, voice=voice)
                samples, sample_rate = audio_result
                
                print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω!")
                print(f"  Sample rate: {sample_rate} Hz")
                print(f"  Samples: {len(samples)} ({samples.dtype})")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
                filename = f"/tmp/kokoro_test_{voice}_{int(os.getpid())}.wav"
                if audio_samples_to_wav(samples, sample_rate, filename):
                    file_size = os.path.getsize(filename)
                    print(f"‚úÖ WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
                    print(f"  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                    with wave.open(filename, 'rb') as f:
                        frames = f.getnframes()
                        duration = frames / float(sample_rate)
                        print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫—É–Ω–¥")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WAV")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
                
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kokoro –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
