#!/bin/bash

# üéØ Master Test Script - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ N8N —Å–∏—Å—Ç–µ–º—ã
echo "üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è N8N —Å–∏—Å—Ç–µ–º—ã"
echo "=" | head -c 50; echo ""

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="/tmp/n8n_test_$(date +%Y%m%d_%H%M%S).log"
TESTS_PASSED=0
TESTS_FAILED=0

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_test_start() {
    echo "üß™ –¢–ï–°–¢: $1" | tee -a "$LOG_FILE"
    echo "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)" >> "$LOG_FILE"
}

log_test_result() {
    local test_name=$1
    local result=$2
    local details=$3
    
    if [ "$result" = "PASS" ]; then
        echo "‚úÖ $test_name: –ü–†–û–®–ï–õ" | tee -a "$LOG_FILE"
        ((TESTS_PASSED++))
    else
        echo "‚ùå $test_name: –ü–†–û–í–ê–õ–ï–ù - $details" | tee -a "$LOG_FILE"
        ((TESTS_FAILED++))
    fi
    echo "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)" >> "$LOG_FILE"
    echo "---" >> "$LOG_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥
    local missing_deps=()
    
    for cmd in curl jq ssh; do
        if ! command -v $cmd >/dev/null 2>&1; then
            missing_deps+=($cmd)
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"
        exit 1
    fi
    
    echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –¢–µ—Å—Ç 1: Health Check
run_health_check() {
    log_test_start "Health Check"
    
    if [ -f "$SCRIPT_DIR/health-check.sh" ]; then
        if bash "$SCRIPT_DIR/health-check.sh" >> "$LOG_FILE" 2>&1; then
            log_test_result "Health Check" "PASS" ""
            return 0
        else
            log_test_result "Health Check" "FAIL" "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            return 1
        fi
    else
        log_test_result "Health Check" "FAIL" "–°–∫—Ä–∏–ø—Ç health-check.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç 2: AI Agents Test
run_ai_agents_test() {
    log_test_start "AI Agents Test"
    
    # –¢–µ—Å—Ç OpenRouter API
    echo "ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenRouter API..." >> "$LOG_FILE"
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenRouter
    if curl -s --max-time 10 "https://openrouter.ai/api/v1/models" >/dev/null 2>&1; then
        echo "‚úÖ OpenRouter API –¥–æ—Å—Ç—É–ø–µ–Ω" >> "$LOG_FILE"
        log_test_result "AI Agents Test" "PASS" ""
        return 0
    else
        log_test_result "AI Agents Test" "FAIL" "OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç 3: Integrations Test
run_integrations_test() {
    log_test_start "Integrations Test"
    
    # –¢–µ—Å—Ç MCP API
    echo "üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP API..." >> "$LOG_FILE"
    
    MCP_RESPONSE=$(ssh root@178.156.142.35 "curl -s --max-time 10 -X POST \
        -H 'Content-Type: application/json' \
        -d '{\"files\":[{\"id\":\"test\",\"src\":\"/tmp/test.jpg\",\"type\":\"photo\",\"durationSec\":5}],\"width\":1080,\"height\":1920,\"tts\":{\"provider\":\"kokoro\",\"voice\":\"default\"},\"ttsText\":\"–¢–µ—Å—Ç\"}' \
        http://localhost:4123/api/create-video" 2>/dev/null)
    
    if echo "$MCP_RESPONSE" | jq -e '.id' >/dev/null 2>&1; then
        JOB_ID=$(echo "$MCP_RESPONSE" | jq -r '.id')
        echo "‚úÖ MCP API —Ä–∞–±–æ—Ç–∞–µ—Ç (Job ID: $JOB_ID)" >> "$LOG_FILE"
        log_test_result "Integrations Test" "PASS" ""
        return 0
    else
        echo "‚ùå MCP API –æ—Ç–≤–µ—Ç: $MCP_RESPONSE" >> "$LOG_FILE"
        log_test_result "Integrations Test" "FAIL" "MCP API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç 4: Full Workflow Test
run_workflow_test() {
    log_test_start "Full Workflow Test"
    
    if [ -f "$SCRIPT_DIR/test-workflow.sh" ]; then
        if bash "$SCRIPT_DIR/test-workflow.sh" >> "$LOG_FILE" 2>&1; then
            log_test_result "Full Workflow Test" "PASS" ""
            return 0
        else
            log_test_result "Full Workflow Test" "FAIL" "Workflow –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏"
            return 1
        fi
    else
        log_test_result "Full Workflow Test" "FAIL" "–°–∫—Ä–∏–ø—Ç test-workflow.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –¢–µ—Å—Ç 5: Performance Test
run_performance_test() {
    log_test_start "Performance Test"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ N8N
    START_TIME=$(date +%s%N)
    if curl -s --max-time 5 "https://mayersn8n.duckdns.org" >/dev/null 2>&1; then
        END_TIME=$(date +%s%N)
        RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 )) # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        echo "‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ N8N: ${RESPONSE_TIME}ms" >> "$LOG_FILE"
        
        if [ $RESPONSE_TIME -lt 5000 ]; then # –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
            log_test_result "Performance Test" "PASS" "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${RESPONSE_TIME}ms"
            return 0
        else
            log_test_result "Performance Test" "FAIL" "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${RESPONSE_TIME}ms"
            return 1
        fi
    else
        log_test_result "Performance Test" "FAIL" "N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $(date)" | tee "$LOG_FILE"
    echo "üìÑ –õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    echo ""
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    echo ""
    
    # –¢–µ—Å—Ç 1: Health Check
    run_health_check
    echo ""
    
    # –¢–µ—Å—Ç 2: AI Agents
    run_ai_agents_test
    echo ""
    
    # –¢–µ—Å—Ç 3: Integrations
    run_integrations_test
    echo ""
    
    # –¢–µ—Å—Ç 4: Performance
    run_performance_test
    echo ""
    
    # –¢–µ—Å—Ç 5: Full Workflow (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π)
    run_workflow_test
    echo ""
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    TOTAL_TESTS=$((TESTS_PASSED + TESTS_FAILED))
    SUCCESS_RATE=$((TESTS_PASSED * 100 / TOTAL_TESTS))
    
    echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "=" | head -c 40; echo ""
    echo "üìÖ –î–∞—Ç–∞: $(date)"
    echo "üìÑ –õ–æ–≥: $LOG_FILE"
    echo "üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
    echo "‚úÖ –ü—Ä–æ—à–ª–æ: $TESTS_PASSED"
    echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $TESTS_FAILED"
    echo "üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $SUCCESS_RATE%"
    echo ""
    
    if [ $TESTS_FAILED -eq 0 ]; then
        echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!"
        echo "‚úÖ N8N —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞"
        echo "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook)
        if [ -n "$SUCCESS_WEBHOOK_URL" ]; then
            curl -s -X POST -H 'Content-Type: application/json' \
                -d "{\"text\": \"‚úÖ N8N Tests Passed: $SUCCESS_RATE% ($TESTS_PASSED/$TOTAL_TESTS)\"}" \
                "$SUCCESS_WEBHOOK_URL" >/dev/null 2>&1
        fi
        
        exit 0
    else
        echo "‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!"
        echo "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ $TESTS_FAILED –æ—à–∏–±–æ–∫"
        echo "üìã –î–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ: $LOG_FILE"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook)
        if [ -n "$ERROR_WEBHOOK_URL" ]; then
            curl -s -X POST -H 'Content-Type: application/json' \
                -d "{\"text\": \"‚ùå N8N Tests Failed: $TESTS_FAILED/$TOTAL_TESTS tests failed\"}" \
                "$ERROR_WEBHOOK_URL" >/dev/null 2>&1
        fi
        
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo "üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 130' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"


