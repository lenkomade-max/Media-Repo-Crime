_execute_workflow(workflow_id)
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                analysis = self.execution_monitor.monitor_execution(
                    execution_result['executionId']
                )
                
                iteration_results.append(analysis)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—Ö
                if analysis['status'] == 'success' and not analysis['errors']:
                    success = True
                    console.print("[bold green]‚ú® Workflow executed successfully![/]")
                    break
                
                # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
                if analysis['errors']:
                    console.print("[bold red]‚ùå Errors detected:[/]")
                    for error in analysis['errors']:
                        console.print(f"  ‚Ä¢ {error['node']}: {error['error'].get('message', 'Unknown')}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    if not self._auto_fix_workflow(workflow_id, analysis):
                        console.print("[bold red]Failed to apply fixes. Manual intervention required.[/]")
                        break
                else:
                    console.print("[yellow]‚ö†Ô∏è  Workflow finished but status is not success[/]")
                    break
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        return self._generate_final_report(workflow_id, success, iteration_results)
    
    def _create_initial_workflow(self, spec: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π workflow –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        builder = WorkflowBuilder()
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: HTTP –∑–∞–ø—Ä–æ—Å
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ spec
        
        builder.add_node(
            node_type="n8n-nodes-base.manualTrigger",
            name="Manual Trigger",
            parameters={},
            position=[100, 100]
        )
        
        builder.add_node(
            node_type="n8n-nodes-base.httpRequest",
            name="HTTP Request",
            parameters={
                "method": "GET",
                "url": spec.get('url', 'https://api.example.com/data')
            },
            position=[300, 100]
        )
        
        builder.connect_nodes("Manual Trigger", "HTTP Request")
        
        workflow_data = builder.build(
            name=spec.get('name', 'AI Generated Workflow'),
            description=spec.get('description', '')
        )
        
        return self.n8n_client.create_workflow(workflow_data)
    
    def _execute_workflow(self, workflow_id: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å workflow"""
        console.print("  üèÉ Executing workflow...")
        result = self.n8n_client.execute_workflow(workflow_id)
        console.print(f"  üìä Execution ID: {result.get('executionId')}")
        return result
    
    def _auto_fix_workflow(self, workflow_id: str, analysis: Dict) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å workflow"""
        console.print("\n[bold cyan]üîß Attempting automatic fixes...[/]")
        
        fixed = False
        
        for error in analysis['errors']:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É
            error_analysis = self.error_analyzer.analyze_error(error['error'])
            
            console.print(f"  üìù Error t