#!/usr/bin/env python3
"""
üîß WORKFLOW FIXER - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow 3TuNc9SUt9EDDqii

–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ workflow
URL: https://mayersn8n.duckdns.org/workflow/3TuNc9SUt9EDDqii
"""

import subprocess
import json
import time
import uuid
from datetime import datetime

class WorkflowFixer:
    def __init__(self):
        self.workflow_id = "3TuNc9SUt9EDDqii"
        self.workflow_url = "https://mayersn8n.duckdns.org/workflow/3TuNc9SUt9EDDqii"
        self.ssh_host = "root@178.156.142.35"
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        colors = {
            "INFO": "\033[36m",      # Cyan
            "SUCCESS": "\033[32m",   # Green
            "ERROR": "\033[31m",     # Red
            "WARNING": "\033[33m",   # Yellow
            "PROGRESS": "\033[35m"   # Magenta
        }
        color = colors.get(level, "\033[0m")
        print(f"{color}[{timestamp}] {message}\033[0m")
    
    def run_ssh(self, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SSH –∫–æ–º–∞–Ω–¥—É"""
        try:
            result = subprocess.run([
                "ssh", self.ssh_host, command
            ], capture_output=True, text=True, timeout=60)
            
            return {
                "success": result.returncode == 0,
                "output": result.stdout.strip(),
                "error": result.stderr.strip()
            }
        except Exception as e:
            return {"success": False, "output": "", "error": str(e)}
    
    def analyze_workflow(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç workflow"""
        self.log("üîç –ê–ù–ê–õ–ò–ó WORKFLOW", "SUCCESS")
        self.log(f"üÜî Workflow ID: {self.workflow_id}")
        self.log(f"üåê URL: {self.workflow_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ workflow
        query = f"SELECT name, active, LENGTH(nodes::text) as nodes_size FROM workflow_entity WHERE id = '{self.workflow_id}';"
        result = self.run_ssh(f'docker exec root-db-1 psql -U n8n -d n8n -c "{query}"')
        
        if result["success"] and result["output"]:
            lines = result["output"].split('\n')
            if len(lines) >= 3:
                data_line = lines[2].strip()
                if data_line and data_line != "(0 rows)":
                    parts = [p.strip() for p in data_line.split('|')]
                    if len(parts) >= 3:
                        workflow_info = {
                            "name": parts[0],
                            "active": parts[1] == 't',
                            "nodes_size": int(parts[2]) if parts[2].isdigit() else 0
                        }
                        
                        self.log("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û WORKFLOW:", "SUCCESS")
                        self.log(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {workflow_info['name']}")
                        self.log(f"   üìä –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ –î–ê' if workflow_info['active'] else '‚ùå –ù–ï–¢'}")
                        self.log(f"   üì¶ –†–∞–∑–º–µ—Ä nodes: {workflow_info['nodes_size']} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        return workflow_info
        
        self.log("‚ùå Workflow –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        return None
    
    def get_workflow_nodes(self):
        """–ü–æ–ª—É—á–∞–µ—Ç nodes workflow –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        self.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ nodes workflow...", "PROGRESS")
        
        query = f"SELECT nodes FROM workflow_entity WHERE id = '{self.workflow_id}';"
        result = self.run_ssh(f'docker exec root-db-1 psql -U n8n -d n8n -t -c "{query}"')
        
        if result["success"] and result["output"]:
            try:
                nodes = json.loads(result["output"])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(nodes)} nodes", "SUCCESS")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π node
                issues = []
                
                for i, node in enumerate(nodes):
                    node_id = node.get("id", f"node_{i}")
                    node_name = node.get("name", "Unknown")
                    node_type = node.get("type", "unknown")
                    
                    self.log(f"   üîç Node {i+1}: {node_name} ({node_type})", "INFO")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                    node_issues = self.check_node_issues(node)
                    
                    if node_issues:
                        self.log(f"      ‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(node_issues)}", "ERROR")
                        issues.extend([(node_id, node_name, issue) for issue in node_issues])
                    else:
                        self.log(f"      ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º", "SUCCESS")
                
                return {
                    "nodes": nodes,
                    "issues": issues
                }
                
            except json.JSONDecodeError as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ nodes: {e}", "ERROR")
                return None
        
        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nodes", "ERROR")
        return None
    
    def check_node_issues(self, node):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–æ–¥–µ"""
        issues = []
        node_type = node.get("type", "")
        parameters = node.get("parameters", {})
        credentials = node.get("credentials", {})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI Agent
        if node_type == "@n8n/n8n-nodes-langchain.agent":
            if not credentials:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç credentials")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter Chat Model
        elif node_type == "@n8n/n8n-nodes-langchain.lmChatOpenRouter":
            if "openRouterApi" not in credentials:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç OpenRouter credentials")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Memory Buffer Window
        elif node_type == "@n8n/n8n-nodes-langchain.memoryBufferWindow":
            if "sessionId" not in parameters and "sessionIdExpression" not in parameters:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP Request
        elif node_type == "n8n-nodes-base.httpRequest":
            if not parameters.get("url"):
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Code node
        elif node_type == "n8n-nodes-base.code":
            if not parameters.get("jsCode"):
                issues.append("–ü—É—Å—Ç–æ–π –∫–æ–¥")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Drive
        elif node_type == "n8n-nodes-base.googleDrive":
            if "googleDriveOAuth2Api" not in credentials:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Google Drive credentials")
        
        return issues
    
    def fix_workflow_issues(self, workflow_data):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ workflow"""
        if not workflow_data["issues"]:
            self.log("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "SUCCESS")
            return True
        
        self.log(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï {len(workflow_data['issues'])} –ü–†–û–ë–õ–ï–ú", "WARNING")
        
        nodes = workflow_data["nodes"]
        fixes_applied = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É
        for node_id, node_name, issue in workflow_data["issues"]:
            self.log(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{issue}' –≤ node '{node_name}'", "PROGRESS")
            
            # –ù–∞—Ö–æ–¥–∏–º node –≤ –º–∞—Å—Å–∏–≤–µ
            target_node = None
            for node in nodes:
                if node.get("id") == node_id:
                    target_node = node
                    break
            
            if not target_node:
                self.log(f"‚ùå Node {node_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if issue == "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId":
                if "parameters" not in target_node:
                    target_node["parameters"] = {}
                target_node["parameters"]["sessionIdExpression"] = "={{ $workflow.executionId }}"
                self.log(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω sessionIdExpression", "SUCCESS")
                fixes_applied += 1
            
            elif issue == "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç OpenRouter credentials":
                if "credentials" not in target_node:
                    target_node["credentials"] = {}
                target_node["credentials"]["openRouterApi"] = {
                    "id": "dctACn3yXSG7qIdH",
                    "name": "OpenRouter account"
                }
                self.log(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã OpenRouter credentials", "SUCCESS")
                fixes_applied += 1
            
            elif issue == "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Google Drive credentials":
                if "credentials" not in target_node:
                    target_node["credentials"] = {}
                target_node["credentials"]["googleDriveOAuth2Api"] = {
                    "id": "XDM9FIbDJMpu7nGH",
                    "name": "Google Drive account"
                }
                self.log(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã Google Drive credentials", "SUCCESS")
                fixes_applied += 1
            
            elif issue == "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL":
                if "parameters" not in target_node:
                    target_node["parameters"] = {}
                
                if "MCP" in node_name or "video" in node_name.lower():
                    target_node["parameters"]["url"] = "http://178.156.142.35:4123/api/create-video"
                    target_node["parameters"]["method"] = "POST"
                    target_node["parameters"]["sendHeaders"] = True
                    target_node["parameters"]["headerParameters"] = {
                        "parameters": [
                            {
                                "name": "Content-Type",
                                "value": "application/json"
                            }
                        ]
                    }
                    self.log(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω URL –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞", "SUCCESS")
                else:
                    target_node["parameters"]["url"] = "https://httpbin.org/json"
                    target_node["parameters"]["method"] = "GET"
                    self.log(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π URL", "SUCCESS")
                
                fixes_applied += 1
            
            elif issue == "–ü—É—Å—Ç–æ–π –∫–æ–¥":
                if "parameters" not in target_node:
                    target_node["parameters"] = {}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è node
                if "–ø—Ä–æ–º–ø—Ç" in node_name.lower() or "prompt" in node_name.lower():
                    target_node["parameters"]["jsCode"] = """
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
const input = $input.first().json;
const topic = input.topic || '–∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è';

const prompt = `–¢—ã AI –°—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã—Ö shorts –≤–∏–¥–µ–æ. –°–æ–∑–¥–∞–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π.

–¢–µ–º–∞: ${topic}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 45-60 —Å–µ–∫—É–Ω–¥
- 6-8 —Å—Ü–µ–Ω –ø–æ 6-10 —Å–µ–∫—É–Ω–¥ –∫–∞–∂–¥–∞—è
- –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫—Ä—é–∫ –≤ –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
- –ß–µ—Ç–∫–∏–µ —Ç–∞–π–º–∏–Ω–≥–∏
- –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
- scenes: –º–∞—Å—Å–∏–≤ —Å—Ü–µ–Ω —Å –ø–æ–ª—è–º–∏ duration, voiceover, visual_description
- total_voiceover: –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–∑–≤—É—á–∫–∏`;

return {
  json: {
    chatInput: prompt,
    topic: topic
  }
};
"""
                elif "mcp" in node_name.lower() or "video" in node_name.lower():
                    target_node["parameters"]["jsCode"] = """
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞
const input = $input.first().json;

const mcpPayload = {
  files: [
    {id: "scene_1", src: "/tmp/test/img1.jpg", type: "photo", durationSec: 10},
    {id: "scene_2", src: "/tmp/test/img2.jpg", type: "photo", durationSec: 10},
    {id: "scene_3", src: "/tmp/test/img3.jpg", type: "photo", durationSec: 10}
  ],
  width: 1080,
  height: 1920,
  fps: 30,
  outputFormat: "mp4",
  tts: {
    provider: "kokoro",
    voice: "default"
  },
  ttsText: input.voiceover || "–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ N8N workflow",
  subtitles: [
    {start: 0, end: 10, text: "–ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞"},
    {start: 10, end: 20, text: "–í—Ç–æ—Ä–∞—è —Å—Ü–µ–Ω–∞"},
    {start: 20, end: 30, text: "–¢—Ä–µ—Ç—å—è —Å—Ü–µ–Ω–∞"}
  ],
  burnSubtitles: true,
  effects: [
    {
      kind: "zoom",
      params: {
        startScale: 1.0,
        endScale: 1.2
      }
    }
  ]
};

return {
  json: mcpPayload
};
"""
                else:
                    target_node["parameters"]["jsCode"] = """
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const input = $input.first().json;

return {
  json: {
    processed: true,
    timestamp: new Date().toISOString(),
    input: input
  }
};
"""
                
                self.log(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥", "SUCCESS")
                fixes_applied += 1
        
        if fixes_applied > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π workflow
            return self.save_fixed_workflow(nodes)
        
        return True
    
    def save_fixed_workflow(self, fixed_nodes):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π workflow –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow...", "PROGRESS")
        
        # –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É –¥–ª—è nodes
        nodes_json = json.dumps(fixed_nodes, ensure_ascii=False)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è SQL (–∑–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)
        nodes_escaped = nodes_json.replace("'", "''")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º workflow –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_query = f"""
        UPDATE workflow_entity 
        SET 
            nodes = '{nodes_escaped}',
            "updatedAt" = NOW()
        WHERE id = '{self.workflow_id}';
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql
        result = self.run_ssh(f'docker exec root-db-1 psql -U n8n -d n8n -c "{update_query}"')
        
        if result["success"]:
            self.log("‚úÖ Workflow –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "SUCCESS")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º N8N –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ N8N –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...", "PROGRESS")
            restart_result = self.run_ssh("docker restart root-n8n-1")
            
            if restart_result["success"]:
                self.log("‚úÖ N8N –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", "SUCCESS")
                time.sleep(15)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                return True
            else:
                self.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ N8N", "WARNING")
                return False
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è workflow: {result['error']}", "ERROR")
            return False
    
    def activate_workflow(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç workflow"""
        self.log("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow...", "PROGRESS")
        
        activate_query = f"""
        UPDATE workflow_entity 
        SET active = true, "updatedAt" = NOW() 
        WHERE id = '{self.workflow_id}';
        """
        
        result = self.run_ssh(f'docker exec root-db-1 psql -U n8n -d n8n -c "{activate_query}"')
        
        if result["success"]:
            self.log("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "SUCCESS")
            return True
        else:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow", "ERROR")
            return False
    
    def test_workflow_execution(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow"""
        self.log("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø WORKFLOW", "SUCCESS")
        
        # –°–æ–∑–¥–∞–µ–º execution
        execution_id = str(uuid.uuid4())
        
        create_execution_query = f"""
        INSERT INTO execution_entity (
            id, "workflowId", mode, finished, status, "startedAt", "createdAt"
        ) VALUES (
            '{execution_id}', '{self.workflow_id}', 'manual', false, 'running', NOW(), NOW()
        );
        """
        
        result = self.run_ssh(f'docker exec root-db-1 psql -U n8n -d n8n -c "{create_execution_query}"')
        
        if result["success"]:
            self.log(f"‚úÖ Execution —Å–æ–∑–¥–∞–Ω: {execution_id}", "SUCCESS")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            return self.monitor_execution(execution_id)
        else:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å execution", "ERROR")
            return False
    
    def monitor_execution(self, execution_id):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ execution"""
        self.log(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ execution: {execution_id}", "PROGRESS")
        
        start_time = time.time()
        
        for i in range(60):  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_query = f"""
            SELECT finished, status, "stoppedAt" 
            FROM execution_entity 
            WHERE id = '{execution_id}';
            """
            
            result = self.run_ssh(f'docker exec root-db-1 psql -U n8n -d n8n -t -c "{status_query}"')
            
            if result["success"] and result["output"]:
                parts = result["output"].strip().split('|')
                if len(parts) >= 3:
                    finished = parts[0].strip() == 't'
                    status = parts[1].strip()
                    stopped_at = parts[2].strip()
                    
                    elapsed = int(time.time() - start_time)
                    self.log(f"üìä [{elapsed:3d}s] Status: {status}, Finished: {finished}", "PROGRESS")
                    
                    if finished:
                        if status == "success":
                            self.log("üéâ EXECUTION –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û!", "SUCCESS")
                            return True
                        else:
                            self.log(f"‚ùå Execution –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {status}", "ERROR")
                            return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if i % 3 == 0:
                elapsed = int(time.time() - start_time)
                self.log(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ {elapsed} —Å–µ–∫—É–Ω–¥...", "INFO")
        
        self.log("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è execution", "ERROR")
        return False
    
    def fix_workflow_completely(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç workflow"""
        self.log("üéØ –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WORKFLOW", "SUCCESS")
        self.log("=" * 80)
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.log("üìã –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "SUCCESS")
        workflow_info = self.analyze_workflow()
        
        if not workflow_info:
            return False
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º nodes
        self.log("\nüìã –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ nodes", "SUCCESS")
        workflow_data = self.get_workflow_nodes()
        
        if not workflow_data:
            return False
        
        # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        self.log("\nüìã –≠—Ç–∞–ø 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", "SUCCESS")
        fix_success = self.fix_workflow_issues(workflow_data)
        
        if not fix_success:
            return False
        
        # 4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º workflow
        self.log("\nüìã –≠—Ç–∞–ø 4: –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow", "SUCCESS")
        activate_success = self.activate_workflow()
        
        if not activate_success:
            return False
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.log("\nüìã –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "SUCCESS")
        test_success = self.test_workflow_execution()
        
        return test_success

def main():
    print("üîß WORKFLOW FIXER - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow 3TuNc9SUt9EDDqii")
    print("=" * 80)
    print("üéØ –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ workflow")
    print("üÜî Workflow ID: 3TuNc9SUt9EDDqii")
    print("üåê URL: https://mayersn8n.duckdns.org/workflow/3TuNc9SUt9EDDqii")
    print()
    
    fixer = WorkflowFixer()
    
    try:
        success = fixer.fix_workflow_completely()
        
        if success:
            fixer.log("\nüéâ WORKFLOW –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù!", "SUCCESS")
            fixer.log("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã", "SUCCESS")
            fixer.log("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "SUCCESS")
            fixer.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ", "SUCCESS")
            fixer.log("üöÄ Workflow –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!", "SUCCESS")
            fixer.log(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ: {fixer.workflow_url}", "SUCCESS")
        else:
            fixer.log("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–ò–¢–¨", "ERROR")
            fixer.log("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "WARNING")
        
        return success
        
    except KeyboardInterrupt:
        fixer.log("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        return False
    except Exception as e:
        fixer.log(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)


